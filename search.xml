<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CoMER</title>
      <link href="/uncategorized/CoMER/"/>
      <url>/uncategorized/CoMER/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>经典模型</title>
      <link href="/SciResearch/ClassicModule/"/>
      <url>/SciResearch/ClassicModule/</url>
      
        <content type="html"><![CDATA[<h1 id="优质博客推荐">优质博客推荐</h1><p><a href="https://blog.csdn.net/qq_37541097/category_9488472.html">网络模型讲解</a></p><h1 id="专有名词">专有名词</h1><ul><li><p>Downstream Tasks: 下游任务, 即要实现的目标任务, 类比操作系统上的应用</p></li><li><p>Pre-train: 公共基本, 处理下游任务前的基础模型, eg: BERT, 类比操作系统</p></li><li><p>Error surface（误差曲面）是机器学习和深度学习中一个重要的概念，特别是在优化算法和神经网络训练的背景下。误差曲面描述了模型参数空间中损失函数（或误差函数）的变化情况</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span></span></span></span> :学习率, 即梯度下降时控制梯度下降的大小因素之一 eg: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>w</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\eta\frac{\partial{L}}{\partial{w}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">L</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li><li><p>Model Bias: 模型偏差, 模型和真实之间的差距, eg: 用线性预测折线</p></li><li><p>update: 经过一个batch更新了一次参数, 所以batch_size越小参数更新次数越多</p></li><li><p>epoch: 经过一轮, 所有的batch都过了一遍</p></li><li><p>Batch_Size: batch越小，那一个epoch中更新参数的次数会更多,batch越大,一个epoch中参数更新的次数会更小。但由于GPU可以并行计算，所以并不是batch越小，所需要的时间越少。优先选择较小的batch</p></li><li><p>Momentum： 不止考虑梯度下降的方向，还要考虑前面的梯度方向，就好比物理中的惯性，有可能避免局部最小</p></li></ul><h1 id="dl基础"><code>DL</code>基础</h1><h2 id="基础模版">基础模版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Neural Network Training Setup</span></span><br><span class="line">dataset = MyDataset(file)  <span class="comment">#  read data via MyDataset</span></span><br><span class="line">tr_set = DataLoader(dataset, batch_size, shuffle=<span class="literal">True</span>)  <span class="comment"># put dataset into Dataloader</span></span><br><span class="line">model = MyModel().to(device) <span class="comment"># construct model and move to device (cpu/cuda)</span></span><br><span class="line">criterion = nn.MSELoss() <span class="comment"># set loss function</span></span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), learning_rate) <span class="comment">#  set optimizer</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Neural Network Training Loop</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(n_epochs): <span class="comment">#  iterate n_epochs</span></span><br><span class="line">    model.train()  <span class="comment"># set model to train mode</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> tr_set:  <span class="comment"># iterate through the dataloader</span></span><br><span class="line">        optimizer.zero_grad()  <span class="comment"># set gradient to zero 每一轮进行梯度清零</span></span><br><span class="line">        x, y = x.to(device), y.to(device)  <span class="comment"># move data to device (cpu/cuda)</span></span><br><span class="line">        pred = model(x)   <span class="comment"># forward pass (compute output)</span></span><br><span class="line">        loss = criterion(pred, y)  <span class="comment"># compute loss</span></span><br><span class="line">        loss.backward()   <span class="comment"># compute gradient (backpropagation) 反向传播计算梯度</span></span><br><span class="line">        optimizer.step()  <span class="comment"># update model with optimizer 参数优化,更新模型参数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Neural Network Testing Loop</span></span><br><span class="line"> model.<span class="built_in">eval</span>() <span class="comment"># set model to evaluation mode</span></span><br><span class="line"> preds = []</span><br><span class="line"> <span class="keyword">for</span> x <span class="keyword">in</span> tt_set: <span class="comment"># iterate through the dataloader</span></span><br><span class="line">    x = x.to(device) <span class="comment"># move data to device (cpu/cuda)</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad(): <span class="comment"># disable gradient calculation</span></span><br><span class="line">        pred = model(x) <span class="comment">#  forward pass (compute output)</span></span><br><span class="line">        preds.append(pred.cpu()) <span class="comment"># collect prediction</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Save/Load Trained Models</span></span><br><span class="line"><span class="comment"># Save</span></span><br><span class="line">torch.save(model.state_dict(), path)</span><br><span class="line"><span class="comment"># Load</span></span><br><span class="line">ckpt = torch.load(path)</span><br><span class="line">model.load_state_dict(ckpt)</span><br></pre></td></tr></table></figure><h2 id="见loss知issue">见Loss知issue</h2><style>.vvqtvrrrwlbo{zoom:50%;}</style><img src="/SciResearch/ClassicModule/image-20240815163223296.png" class="vvqtvrrrwlbo" alt="image-20240815163223296"><ul><li>判断在训练集上的Loss<ul><li>如果在训练集上Loss很大, 那优先判断是不是<code>model bias</code>, 将模型变复杂看Loss会不会更好</li><li>如果模型复杂效果更差, 那便是<code>Grad Optimization</code>的问题</li></ul></li><li>然后判断在测试集上的Loss</li><li>如果在测试集上Loss很大, 那优先判断是不是<code>overfitting</code></li><li>解决<code>overfitting</code>的方法有数据增强和收集数据增加训练集;    给模型增加限制,eg: 设置较少的参数/较少的特征或者公用参数;    提前停止;  Dropout;  Regularization</li></ul><h2 id="learnin-rate">learnin_rate</h2><blockquote><p>Update learnin_rate</p></blockquote><style>.wdvmqesywthh{zoom: 50%;}</style><img src="/SciResearch/ClassicModule/image-20240816150452849.png" class="wdvmqesywthh" alt="image-20240816150452849"><h3 id="adagrad">Adagrad</h3><blockquote><p>不仅考虑现在的梯度还要考虑以前的梯度</p></blockquote><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>θ</mi><mi>i</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mo>←</mo><msubsup><mi>θ</mi><mi>i</mi><mi>t</mi></msubsup><mo>−</mo><mfrac><mi>η</mi><msubsup><mi>σ</mi><mi>i</mi><mi>t</mi></msubsup></mfrac><msubsup><mi>g</mi><mi>i</mi><mi>t</mi></msubsup><mspace linebreak="newline"></mspace><msubsup><mi>σ</mi><mi>i</mi><mi>t</mi></msubsup><mo>=</mo><msqrt><mrow><mfrac><mn>1</mn><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>t</mi></munderover><mo stretchy="false">(</mo><msubsup><mi>g</mi><mi>i</mi><mi>t</mi></msubsup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">\theta^{t+1}_i\leftarrow\theta^{t}_i-\frac{\eta}{\sigma^t_i}g^t_i\\\sigma^t_i=\sqrt{\frac{1}{t+1}\sum^t_{i=0}(g^t_i)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.131103em;vertical-align:-0.266995em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.433005em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266995em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0905559999999999em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8435559999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.070424em;vertical-align:-0.9628639999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7753559999999999em;"><span style="top:-2.4231360000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">η</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9628639999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8435559999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0905559999999999em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8435559999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.28598em;vertical-align:-1.277669em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.008311em;"><span class="svg-align" style="top:-5.245979999999999em;"><span class="pstrut" style="height:5.245979999999999em;"></span><span class="mord" style="padding-left:1.056em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7805610000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7753559999999999em;"><span style="top:-2.4231360000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.9683109999999995em;"><span class="pstrut" style="height:5.245979999999999em;"></span><span class="hide-tail" style="min-width:0.742em;height:3.32598em;"><svg width='400em' height='3.32598em' viewBox='0 0 400000 3325' preserveAspectRatio='xMinYMin slice'><path d='M702 80H40000040H742v3191l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667219 661 l218 661zM702 80H400000v40H742z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span></span></span></span></span></p><style>.hxfdhvoirsyf{zoom:50%;}</style><img src="/SciResearch/ClassicModule/image-20240816150620903.png" class="hxfdhvoirsyf" alt="image-20240816150620903"><h2 id="rmsprop">RMSProp</h2><blockquote><p>通过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>控制是当前的梯度参考价值大还是现在的梯度参考价值大</p></blockquote><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>θ</mi><mi>i</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mo>←</mo><msubsup><mi>θ</mi><mi>i</mi><mi>t</mi></msubsup><mo>−</mo><mfrac><mi>η</mi><msubsup><mi>σ</mi><mi>i</mi><mi>t</mi></msubsup></mfrac><msubsup><mi>g</mi><mi>i</mi><mi>t</mi></msubsup><mspace linebreak="newline"></mspace><msubsup><mi>σ</mi><mi>i</mi><mi>t</mi></msubsup><mo>=</mo><msqrt><mrow><mi>α</mi><mo stretchy="false">(</mo><msubsup><mi>σ</mi><mi>i</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msubsup><mi>g</mi><mi>i</mi><mi>t</mi></msubsup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">\theta^{t+1}_i\leftarrow\theta^{t}_i-\frac{\eta}{\sigma^t_i}g^t_i\\\sigma^t_i=\sqrt{\alpha(\sigma^{t-1}_i)^2+(1-\alpha)(g^t_i)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.131103em;vertical-align:-0.266995em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.433005em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266995em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0905559999999999em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8435559999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.070424em;vertical-align:-0.9628639999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7753559999999999em;"><span style="top:-2.4231360000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">η</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9628639999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8435559999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0905559999999999em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8435559999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5174375em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3225625em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.4231360000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7753559999999999em;"><span style="top:-2.4231360000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2825625em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5174375em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="adam">Adam</h2><p>RMSProp + Momentum</p><h2 id="learning-rate-scheduling">Learning Rate Scheduling</h2><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>θ</mi><mi>i</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mo>←</mo><msubsup><mi>θ</mi><mi>i</mi><mi>t</mi></msubsup><mo>−</mo><mfrac><msup><mi>η</mi><mi>t</mi></msup><msubsup><mi>σ</mi><mi>i</mi><mi>t</mi></msubsup></mfrac><msubsup><mi>g</mi><mi>i</mi><mi>t</mi></msubsup></mrow><annotation encoding="application/x-tex">\theta^{t+1}_i\leftarrow\theta^{t}_i-\frac{\eta^t}{\sigma^t_i}g^t_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.131103em;vertical-align:-0.266995em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.433005em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266995em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0905559999999999em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8435559999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.43342em;vertical-align:-0.9628639999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4705559999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7753559999999999em;"><span style="top:-2.4231360000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9628639999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8435559999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><h3 id="learning-rate-decay">Learning Rate Decay</h3><blockquote><p>一开始距离终点很远，慢慢的距离终点在变近，所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span></span></span></span>慢慢变小,相当于踩刹车</p></blockquote><ul><li>下图是在Adagrad的基础上增加Learning Rate Decay之后的效果</li></ul><style>.jejcoklkpmip{zoom:50%;}</style><img src="/SciResearch/ClassicModule/image-20240816150716831.png" class="jejcoklkpmip" alt="image-20240816150716831"><h3 id="warm-up">Warm Up</h3><blockquote><p>Increase and then decrease 先变大后变小</p></blockquote><h2 id="soft-max">Soft-max</h2><blockquote><p>输入: 通常被称为logit</p></blockquote><style>.pmzfjikslqvm{zoom:50%;}</style><img src="/SciResearch/ClassicModule/image-20240816154030059.png" class="pmzfjikslqvm" alt="image-20240816154030059"><h2 id="loss-of-classification">Loss of Classification</h2><blockquote><p>常用 Cross-entropy</p></blockquote><style>.crlisdadtmly{zoom:50%;}</style><img src="/SciResearch/ClassicModule/image-20240816154406097.png" class="crlisdadtmly" alt="image-20240816154406097"><blockquote><p>为什么要选 Cross-entropy, 因为Cross-entropy更容易走到loss小的区域, 而MSE的左上角比较平缓不容易走到右下角</p></blockquote><style>.ojykhhoigjro{zoom:50%;}</style><img src="/SciResearch/ClassicModule/image-20240816154812414.png" class="ojykhhoigjro" alt="image-20240816154812414"><h1 id="cnn">CNN</h1><h2 id="结构">结构</h2><img src="/SciResearch/ClassicModule/CNN%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" class="" title="ClassicModule"><ul><li>输入层<code>Input layer</code></li><li>卷积层 <code>CONV layer</code></li><li>池化层 <code>Pooling layer</code></li><li>全连接层 <code>FC layer</code></li><li>输出层 <code>Output layer</code></li></ul><h3 id="input-layer">Input layer</h3><p>对原始图像做预处理: 去均值、归一化等</p><h3 id="conv-layer">CONV layer</h3><p>通过控制卷积核的大小，步幅和填充提取特征，每个神经元通过不同的卷积核关注图像的不同的特征</p><h3 id="pooling-layer">Pooling layer</h3><p>利用特征不变形和特征降维压缩图像</p><h2 id="流程">流程</h2><ul><li>INPUT</li><li>[ [ CONV -&gt; RELU ]N -&gt; POOL? ]M</li><li>[ FC -&gt; RELU ]K</li><li>FC</li></ul><h1 id="alexnet">AlexNet</h1><h2 id="结构">结构</h2><blockquote><p>5个卷积层后紧跟个全连接层， 采用ReLu激活函数，并在全连接层后增加Dropout层减少过拟合</p></blockquote><img src="/SciResearch/ClassicModule/AlexNet%E7%BB%93%E6%9E%84%E5%9B%BE.png" class="" title="ClassicModule"><h1 id="vgg16">VGG16</h1><h2 id="结构">结构</h2><blockquote><p>采用连续的3×3卷积核代替AlexNet中的较大卷积核（11×11、5×5）</p></blockquote><img src="/SciResearch/ClassicModule/VGG16%E7%BB%93%E6%9E%84%E5%9B%BE.png" class="" title="ClassicModule"><h1 id="resnet">ResNet</h1><h2 id="残差结构">残差结构</h2><img src="/SciResearch/ClassicModule/residual%E7%BB%93%E6%9E%84%E5%9B%BE.png" class="" title="ClassicModule"><h2 id="优势">优势</h2><p>可以较好的解决梯度消失|爆炸和模型退化的问题</p><ul><li>梯度消失: 假设每一层的梯度是一个小于1的数， 随着层数变多，前面层的梯度会越来越小</li><li>模型退化: 随着层数的加深, 效果退化, 不如层数少的训练效果好</li></ul><h2 id="亮点">亮点</h2><ul><li>提示出residual模块</li><li>使用Batch Normalization加速训练(丢弃dropout)</li></ul><h1 id="densenet">DenseNet</h1><h2 id="结构">结构</h2><blockquote><p>DenseNet的网络结构主要由<strong>DenseBlock</strong>和<strong>Transition</strong>组成</p></blockquote><img src="/SciResearch/ClassicModule/DenseNet.png" class="" title="ClassicModule"><p>​在DenseBlock中，各个层的特征图大小一致，可以在channel维度上连接。DenseBlock中的非线性组合函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mo>⋅</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(⋅)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord">⋅</span><span class="mclose">)</span></span></span></span>采用的是BN+ReLU+3x3 Conv的结构，如图所示。另外值得注意的一点是，与ResNet不同，所有DenseBlock中各个层卷积之后均输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>个特征图，即得到的特征图的channel数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> ，或者说采用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>个卷积核。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 在DenseNet称为growth rate，这是一个超参数。一般情况下使用较小的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>（比如12)，就可以得到较佳的性能。假定输入层的特征图的channel数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">k_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>层输入的channel数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>0</mn></msub><mo>+</mo><mi>k</mi><mo stretchy="false">(</mo><mi>L</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k_0+k(L−1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，因此随着层数增加，尽管 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 设定得较小，DenseBlock的输入会非常多，不过这是由于特征重用所造成的，每个层仅有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个特征是自己独有的。</p><p>​Transition层主要用于连接两个相邻的DenseBlock，整合上一个DenseBlock获得的特征，缩小上一个DenseBlock的宽高，达到下采样效果，特征图的宽高减半。Transition层包括一个1x1卷积（用于调整通道数）和2x2AvgPooling（用于降低特征图大小），结构为BN+ReLU+1x1 Conv+2x2 AvgPooling。因此，Transition层可以起到压缩模型的作用 。</p><h1 id="👻-transformer">👻 Transformer</h1><h2 id="结构">结构</h2><style>.ghzkorxwkvjd{zoom:50%;}</style><img src="/SciResearch/ClassicModule/Transformer%E7%BB%93%E6%9E%84.jpg" class="ghzkorxwkvjd" alt="Transformer结构"><h2 id="残差和标准化">残差和标准化</h2><h3 id="layernorm">LayerNorm</h3><h4 id="原理">原理</h4><p>层归一化是一种常用的归一化技术，它在每一层的输出上进行归一化操作，使得输出的均值为0，方差为1。这样可以使得模型在训练过程中更稳定，因为它可以减少内部协变量的移动，即输入数据的分布在训练过程中的改变。此外，层归一化还可以加速模型的收敛速度，提高模型的训练效率。</p><h4 id="公式">公式</h4><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><msqrt><mrow><mi>V</mi><mi>a</mi><mi>r</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>ϵ</mi></mrow></msqrt></mfrac><mo>∗</mo><mi>γ</mi><mo>+</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">y=\frac{x-E(x)}{\sqrt{Var(x)+\epsilon}}*\gamma+\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.557em;vertical-align:-1.13em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.175em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">ϵ</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.13em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span></span></p><h4 id="代码">代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LayerNorm</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, feature, eps=<span class="number">1e-6</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        nn.Parameter: 将参数告知优化器此参数需要优化(学习)</span></span><br><span class="line"><span class="string">        :param feature: self-attention 的 x 的大小</span></span><br><span class="line"><span class="string">        :param eps:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(LayerNorm, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.gamma = nn.Parameter(torch.ones(feature))</span><br><span class="line">        <span class="variable language_">self</span>.beta = nn.Parameter(torch.zeros(feature))</span><br><span class="line">        <span class="variable language_">self</span>.eps = eps <span class="comment"># 防止分母为0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        mean = x.mean(-<span class="number">1</span>, keepdim=<span class="literal">True</span>) <span class="comment"># 均值</span></span><br><span class="line">        std = x.std(-<span class="number">1</span>, keepdim=<span class="literal">True</span>) <span class="comment">#方差</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.gamma * (x - mean) / (std + <span class="variable language_">self</span>.eps) + <span class="variable language_">self</span>.beta</span><br></pre></td></tr></table></figure><h3 id="add-norm">Add&amp;Norm</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SublayerConnection</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这不仅仅做了残差，这是把残差和 layernorm 一起给做了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size, dropout=<span class="number">0.1</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(SublayerConnection, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="comment"># 第一步做 dropout</span></span><br><span class="line">        <span class="variable language_">self</span>.dropout = nn.Dropout(p=dropout)</span><br><span class="line">        <span class="comment"># 第二步做 layernorm</span></span><br><span class="line">        <span class="variable language_">self</span>.layer_norm = LayerNorm(size)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, sublayer</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param x: 就是self-attention的输入</span></span><br><span class="line"><span class="string">        :param sublayer: self-attention层</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.layer_norm(x + <span class="variable language_">self</span>.dropout(sublayer(x)))</span><br></pre></td></tr></table></figure><h2 id="attention">Attention</h2><h4 id="公式">公式</h4><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mfrac><mrow><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup></mrow><msqrt><msub><mi>d</mi><mi>k</mi></msub></msqrt></mfrac><mo stretchy="false">)</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">Attention(Q,K,V)=softmax(\frac{QK^T}{\sqrt{d_k}})V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">t</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.448331em;vertical-align:-0.93em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5183309999999999em;"><span style="top:-2.25278em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.81722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.18278000000000005em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span></span></p><h4 id="q-k-v">Q|K|V</h4><h5 id="注意力分数">注意力分数</h5><blockquote><p>红圈中内容代表I am a stu中I字对I字的注意力分数</p></blockquote><img src="/SciResearch/ClassicModule/image-20240812162603738.png" class="" title="image-20240812162603738"><h5 id="注意力权重">注意力权重</h5><blockquote><p>每一个字的注意力分数对每个字的一维特征进行加权求和</p></blockquote><img src="/SciResearch/ClassicModule/image-20240812162817413.png" class="" title="image-20240812162817413"><h5 id="缩小点积范围">缩小点积范围</h5><blockquote><p>下图是Softmax函数的分布, 如果不缩小点积的范围那么大多数值会分布在两端,梯度很小的地方,会造成梯度消失</p></blockquote><style>.taiqnfdgjild{zoom:50%;}</style><img src="/SciResearch/ClassicModule/image-20240812163307888.png" class="taiqnfdgjild" alt="image-20240812163307888"><h4 id="代码">代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MutiHeadAttention</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, d_model, num_heads</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.num_heads = num_heads</span><br><span class="line">        <span class="variable language_">self</span>.d_model = d_model</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.w_q = nn.Linear(d_model, num_heads)</span><br><span class="line">        <span class="variable language_">self</span>.w_k = nn.Linear(d_model, num_heads)</span><br><span class="line">        <span class="variable language_">self</span>.w_v = nn.Linear(d_model, num_heads)</span><br><span class="line">        <span class="variable language_">self</span>.w_combine = nn.Linear(d_model, num_heads)</span><br><span class="line">        <span class="variable language_">self</span>.softmax = nn.Softmax(dim=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, q, k, v, mask=<span class="literal">None</span></span>):</span><br><span class="line">        batch_size, time, dimension = q.shape</span><br><span class="line">        n_dim = <span class="variable language_">self</span>.d_model // <span class="variable language_">self</span>.num_heads</span><br><span class="line">        q, k, v = <span class="variable language_">self</span>.w_q(q), <span class="variable language_">self</span>.w_k(k), <span class="variable language_">self</span>.w_v(v)</span><br><span class="line"></span><br><span class="line">        q = q.view(batch_size, time, <span class="variable language_">self</span>.num_heads, n_dim).permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        k = k.view(batch_size, time, <span class="variable language_">self</span>.num_heads, n_dim).permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        v = v.view(batch_size, time, <span class="variable language_">self</span>.num_heads, n_dim).permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        score = q @ k.transpose(<span class="number">2</span>, <span class="number">3</span>) / math.sqrt(n_dim)</span><br><span class="line">        <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            score = score.masked_fill(mask == <span class="number">0</span>, -<span class="number">10000</span>)</span><br><span class="line">        score = <span class="variable language_">self</span>.softmax(score) @ v</span><br><span class="line">        score = score.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>).contiguous().view(batch_size, time, dimension)</span><br><span class="line">        out = <span class="variable language_">self</span>.w_combine(score)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><h2 id="position-embedding">Position Embedding</h2><h3 id="公式">公式</h3><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><msub><mi>E</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mi>o</mi><mi>s</mi><mo separator="true">,</mo><mn>2</mn><mi>i</mi><mo stretchy="false">)</mo></mrow></msub><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>p</mi><mi>o</mi><mi>s</mi><mi mathvariant="normal">/</mi><mn>1000</mn><msup><mn>0</mn><mrow><mn>2</mn><mi>i</mi><mi mathvariant="normal">/</mi><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub></mrow></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>P</mi><msub><mi>E</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mi>o</mi><mi>s</mi><mo separator="true">,</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>p</mi><mi>o</mi><mi>s</mi><mi mathvariant="normal">/</mi><mn>1000</mn><msup><mn>0</mn><mrow><mn>2</mn><mi>i</mi><mi mathvariant="normal">/</mi><msub><mi>d</mi><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>l</mi></mrow></msub></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">PE_{(pos,2i)}=sin(pos/10000^{2i/d_{model}})\\PE_{(pos,2i+1)}=cos(pos/10000^{2i/d_{model}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.188em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord">/</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">i</span><span class="mord mtight">/</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.188em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord">/</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">i</span><span class="mord mtight">/</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><h3 id="代码">代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PositionalEncoding</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, d_model, max_len=<span class="number">512</span>, device=<span class="string">&#x27;cuda&#x27;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 创建一个形状为(max_len, d_model)的全零张量, 用于存放位置编码</span></span><br><span class="line">        <span class="variable language_">self</span>.encodeing = torch.zeros(max_len, d_model, device=device)</span><br><span class="line">        <span class="comment"># 位置编码不需要计算梯度</span></span><br><span class="line">        <span class="variable language_">self</span>.encodeing.requires_grad = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 生成[0, 1, 2, ..., max_len - 1]的序列</span></span><br><span class="line">        pos = torch.arange(<span class="number">0</span>, max_len, device=device)</span><br><span class="line">        <span class="comment"># 转换为浮点数并增加维度, 方便进行广播运算</span></span><br><span class="line">        pos = pos.<span class="built_in">float</span>().unsqueeze(dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 生成[0, 2, 4, ..., d_model - 2]的序列并转换为浮点数</span></span><br><span class="line">        _2i = torch.arange(<span class="number">0</span>, d_model, step=<span class="number">2</span>, device=device).<span class="built_in">float</span>()</span><br><span class="line">        <span class="variable language_">self</span>.encodeing[:, <span class="number">0</span>::<span class="number">2</span>] = torch.sin(pos / <span class="number">10000</span> ** (_2i / d_model))</span><br><span class="line">        <span class="variable language_">self</span>.encodeing[:, <span class="number">1</span>::<span class="number">2</span>] = torch.cos(pos / <span class="number">10000</span> ** (_2i / d_model))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        batch_size, seq_len = x.size()</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.encodeing[:seq_len, :]</span><br></pre></td></tr></table></figure><h3 id="理由">理由</h3><blockquote><p>如下图,attention的计算中并不包含位置信息,交换K和V的字顺序计算出的甲醛和值相同的,因此要引入位置信息</p></blockquote><style>.ucewkswqtidm{zoom:80%;}</style><img src="/SciResearch/ClassicModule/image-20240812163527089.png" class="ucewkswqtidm" alt="image-20240812163527089"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nn.Embedding(src_vocab_size, d_model): 词汇表大小×词嵌入的维度</span><br><span class="line">torch.unsqueeze(dim): 在指定位置添加一个维度</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SciResearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-&gt;repository</title>
      <link href="/git/git/"/>
      <url>/git/git/</url>
      
        <content type="html"><![CDATA[<h1 id="首次提交至main分支">首次提交至main分支</h1><ul><li><p>初始化本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>添加到暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li><p>添加提交信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;first...&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>关联远程<code>github</code>仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 仓库地址</span><br></pre></td></tr></table></figure></li><li><p>拉取远程<code>readme.md</code>文件(如果有的话)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --rebase origin main</span><br></pre></td></tr></table></figure></li><li><p>查看本地分支并重命名为main(本地默认初始化为master分支)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 重命名当前分支</span></span><br><span class="line">git branch -m main</span><br></pre></td></tr></table></figure></li><li><p>推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList</title>
      <link href="/LeetCode/LinkedList/"/>
      <url>/LeetCode/LinkedList/</url>
      
        <content type="html"><![CDATA[<h1 id="linkedlist-node">LinkedList Node</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="comment">// 结点值</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="comment">// 下一个结点</span></span><br><span class="line">    ListNode next;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 全参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="linkedlist-operate">LinkedList Operate</h1><h2 id="insert">insert</h2><blockquote><p>// 注意: 头结点 -&gt; 建议增加虚拟头结点进行处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cur.val = target;</span><br><span class="line">newNode.next = cur.next;</span><br><span class="line">cur.next = newNode;</span><br></pre></td></tr></table></figure><h2 id="delete">delete</h2><blockquote><p>// 注意: 头结点 -&gt; 建议增加虚拟头结点进行处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cur.next.val = target;</span><br><span class="line">cur.next = cur.next.next;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array</title>
      <link href="/LeetCode/Array/"/>
      <url>/LeetCode/Array/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找">二分查找</h1><blockquote><p>使用条件:</p><ul><li>数组中元素是有序的</li><li>注意: 若数组中存在重复元素, 那最后查找结果下标并不唯一</li></ul><p>使用场景:</p><ul><li>在有序数组中寻找目标值的下标</li><li>将目标值插入有序数组中</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;  <span class="comment">// 因为是[left, right]左闭右闭, 因此必须判断等于的情况</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双指针">双指针</h1><blockquote><p>介绍: 通过一个快指针和一个慢指针在一个for循环下完成两个for循环的工作</p><p>使用方法:</p><ul><li>同向移动</li><li>双向移动</li></ul><p>使用场景:</p><ul><li>原地移除数组中的某元素(同向)</li><li>对有正有负的有序数组的元素平方再排序(双向)</li></ul></blockquote><h1 id="滑动窗口">滑动窗口</h1><blockquote><p>介绍: 不断调整窗口大小寻找所需结果(利用两个指针控制窗口大小)</p><p>使用场景:</p><ul><li>求满足条件的子序列</li></ul></blockquote><h1 id="前缀和">前缀和</h1><blockquote><p>介绍: 类似与哈夫曼编码的思想, 利用新数组保存每个数组元素i之前(包括i)的和</p><p>使用场景:</p><ul><li>对数组的区间和使用频繁的需求</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API开放平台</title>
      <link href="/Project/API%E5%B9%B3%E5%8F%B0/"/>
      <url>/Project/API%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="项目总结">项目总结</h1><h1 id="数据库设计">数据库设计</h1><h2 id="yml配置">yml配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/xxxx</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xxxx</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis-plus</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">isDelete</span> <span class="comment"># 全局逻辑删除的实体字段名</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值（默认为 1）</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值（默认为 0）</span></span><br></pre></td></tr></table></figure><h2 id="数据表">数据表</h2><p>🎈 <a href="http://sqlfather.yupi.icu/">快速生成<code>SQL</code></a></p><h3 id="用户表user">用户表<code>user</code></h3><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">账号</th><th style="text-align:center">密码</th><th style="text-align:center">用户昵称</th><th style="text-align:center">用户头像</th><th style="text-align:center">accessKey</th><th style="text-align:center">secretKey</th><th style="text-align:center">用户角色</th><th style="text-align:center">创建时间</th><th style="text-align:center">更新时间</th><th style="text-align:center">是否删除</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">userAccount</td><td style="text-align:center">userPassword</td><td style="text-align:center">userName</td><td style="text-align:center">userAvatar</td><td style="text-align:center">accessKey</td><td style="text-align:center">secretKey</td><td style="text-align:center">userRole</td><td style="text-align:center">createTime</td><td style="text-align:center">updateTime</td><td style="text-align:center">isDelete</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id           <span class="type">bigint</span> auto_increment comment <span class="string">&#x27;id&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    userAccount  <span class="type">varchar</span>(<span class="number">256</span>)                           <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">    userPassword <span class="type">varchar</span>(<span class="number">512</span>)                           <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    userName     <span class="type">varchar</span>(<span class="number">256</span>)                           <span class="keyword">null</span> comment <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">    userAvatar   <span class="type">varchar</span>(<span class="number">1024</span>)                          <span class="keyword">null</span> comment <span class="string">&#x27;用户头像&#x27;</span>,</span><br><span class="line">    accessKey    <span class="type">varchar</span>(<span class="number">512</span>)                           <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;accessKey&#x27;</span>,</span><br><span class="line">    secretKey    <span class="type">varchar</span>(<span class="number">512</span>)                           <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;secretKey&#x27;</span>,</span><br><span class="line">    userRole     <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">default</span> <span class="string">&#x27;user&#x27;</span>            <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户角色：user/admin/ban&#x27;</span>,</span><br><span class="line">    createTime   datetime     <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    updateTime   datetime     <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    isDelete     tinyint      <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户&#x27;</span> <span class="keyword">collate</span> <span class="operator">=</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><h3 id="接口信息表interface-info">接口信息表<code>interface_info</code></h3><blockquote><p>Tips: 仿照网络中请求样例进行设计</p><p>​- status中 0-关闭(默认) 1 -打开</p></blockquote><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">名称</th><th style="text-align:center">描述</th><th style="text-align:center">请求地址</th><th style="text-align:center">请求类型</th><th style="text-align:center">请求头</th><th style="text-align:center">响应头</th><th style="text-align:center">状态</th><th>创建人</th><th style="text-align:center">创建时间</th><th style="text-align:center">更新时间</th><th style="text-align:center">是否删除</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">name</td><td style="text-align:center">description</td><td style="text-align:center">url</td><td style="text-align:center">method</td><td style="text-align:center">requestHeader</td><td style="text-align:center">responseHeader</td><td style="text-align:center">status</td><td>userId</td><td style="text-align:center">createTime</td><td style="text-align:center">updateTime</td><td style="text-align:center">isDelete</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 接口信息表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> `interface_info`</span><br><span class="line">(</span><br><span class="line">    `id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;接口名称&#x27;</span>,</span><br><span class="line">    `description` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">null</span> comment <span class="string">&#x27;接口描述&#x27;</span>,</span><br><span class="line">    `url` <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;接口地址&#x27;</span>,</span><br><span class="line">    `<span class="keyword">method</span>` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;请求方法&#x27;</span>,</span><br><span class="line">    `requestHeader` text <span class="keyword">null</span> comment <span class="string">&#x27;请求头&#x27;</span>,</span><br><span class="line">    `responseHeader` text <span class="keyword">null</span> comment <span class="string">&#x27;响应头&#x27;</span>,</span><br><span class="line">    `status` <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;接口状态 0-关闭(默认) 1-打开&#x27;</span>,</span><br><span class="line">    `userId` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `createTime` datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `updateTime` datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `isDeleted` tinyint <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除(0-未删, 1-已删)&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;接口信息表&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="用户接口关系表user-interface-info">用户接口关系表<code>user_interface_info</code></h3><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">用户id</th><th style="text-align:center">接口id</th><th style="text-align:center">拥有调用次数</th><th style="text-align:center">已调用次数</th><th style="text-align:center">状态</th><th style="text-align:center">创建时间</th><th style="text-align:center">更新时间</th><th style="text-align:center">是否删除</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">userId</td><td style="text-align:center">interfaceInfoId</td><td style="text-align:center">totalNum</td><td style="text-align:center">invokeNum</td><td style="text-align:center">status</td><td style="text-align:center">createTime</td><td style="text-align:center">updateTime</td><td style="text-align:center">isDelete</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户接口关系表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> `user_interface_info`</span><br><span class="line">(</span><br><span class="line">    `id`              <span class="type">bigint</span>                             <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    `userId`          <span class="type">bigint</span>                             <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    `interfaceInfoId` <span class="type">bigint</span>                             <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;接口id&#x27;</span>,</span><br><span class="line">    `totalNum`        <span class="type">int</span>      <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;拥有调用次数&#x27;</span>,</span><br><span class="line">    `invokeNum`       <span class="type">int</span>      <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;已调用次数&#x27;</span>,</span><br><span class="line">    `status`          <span class="type">int</span>      <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;0-正常(默认) 1-禁用(次数用光)&#x27;</span>,</span><br><span class="line">    `createTime`      datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `updateTime`      datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `isDeleted`       tinyint  <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除(0-未删, 1-已删)&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户接口关系表&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="快速生成crud">快速生成CRUD</h1><p>🎈 <code>MybatisX</code>插件</p><ul><li><p>选择模块名称、驼峰命名、生成位置(最后先统一生成在一个包内, 然后分别复制过去)</p><img src="/Project/API%E5%B9%B3%E5%8F%B0/image-20240728143557303.png" class="" title="image-20240728143557303"><img src="/Project/API%E5%B9%B3%E5%8F%B0/image-20240728143607828.png" class="" title="image-20240728143607828"></li><li><p>将生成的entity、service、mapper复制到对应的位置，修改mapper.xml中的包名</p></li><li><p>增加主键和逻辑删除注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer isDelete;</span><br></pre></td></tr></table></figure></li></ul><h1 id="模拟接口模块开发">模拟接口模块开发</h1><h2 id="提供接口">提供接口</h2><blockquote><p>模块: api-interface</p><p>功能: 提供模拟的接口</p><p>提供三个模拟接口  GET接口 | POST接口(url传参) | (Restful)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 名称API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/name&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping()</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNameByGet</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GET 你的名字是&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNameByPost</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;POST 你的名字是&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping()</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsernameByPost</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;POST 用户名是&quot;</span> + user.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网关流量染色验证">网关流量染色验证</h2><blockquote><p>流量染色: 指在请求流中添加标识（例如特定的 HTTP 头部或请求参数），以标记不同类型的流量。通过这种方式，流量在经过各个微服务和组件时可以被识别和处理。</p><p>避免非法调用故在网关处增加流量染色, 必须是网关转发的请求才会进行处理</p><p>🎈 实现流程:</p><ul><li>实现全局请求拦截器判断请求是否是由网关转发而来</li><li>调用对应接口</li></ul></blockquote><p>🔗 全局请求拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局接口请求拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回 true：放行 false：不放行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Gateway-Flag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="literal">null</span> || !flag.equals(<span class="string">&quot;gbbdxstx&quot;</span>)) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            <span class="comment">// 设置响应内容类型和编码</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="comment">// 写入响应体</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;您无权限调用此接口&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//true表示放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔗 注册自定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，注册web层相关组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GlobalInterceptor globalInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自定义拦截器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(globalInterceptor)</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展Spring MVC框架的消息转换器</span></span><br><span class="line"><span class="comment">     * 避免返回字符串时是乱码&#x27;?&#x27;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        converters.stream()</span><br><span class="line">            <span class="comment">// 过滤出StringHttpMessageConverter类型实例</span></span><br><span class="line">            .filter(StringHttpMessageConverter.class::isInstance)</span><br><span class="line">            .map(c -&gt; (StringHttpMessageConverter) c)</span><br><span class="line">            <span class="comment">// 这里将转换器的默认编码设置为utf-8</span></span><br><span class="line">            .forEach(c -&gt; c.setDefaultCharset(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口调用sdk开发">接口调用SDK开发</h1><blockquote><p>模块： api-sdk</p><p><code>SDK</code>: 一组工具、库、示例代码的集合，帮助开发者|接口调用者创建应用程序或者进行特定的开发任务</p><p>模块功能: 提供客户端服务，使开发者|接口调用者只需要关注调用哪个接口，传递哪些参数，就跟调用现有的方法一样, 这样开发者| 接口调用者便不用自己编写签名认证的代码, 只要调用客户端的方法即可</p><p>调用HTTP方式: HttpClient | RestTemplate | 第三方库(OKHTTP、Hutool)</p><p>🎈​ 本项目使用的是 Hutool 工具包</p><p>🎈 实现流程:</p><ul><li>客户端开发, 封装请求头(签名认证信息), 向网关发送请求</li><li>签名工具类(加密)</li><li>编写配置类, 实现将从配置文件读取信息并把客户端交给Spring容器管理</li><li>实现开发者引用<code>SDK</code>自动配置</li><li>利用Maven打包, 上传到仓库中</li></ul></blockquote><h2 id="🔗-api签名认证介绍">🔗 API签名认证介绍</h2><h3 id="本质">本质</h3><ul><li>签发签名</li><li>使用签名(校验签名)</li></ul><blockquote><p>用户每次调用接口都需要携带ak和sk, 只认签名, 不关注用户登录态</p><p>ak和sk类似用户名和密码, 区别是ak和sk是无状态的</p></blockquote><ul><li>accessKey: 调用的标识</li><li>secretKey: 密钥</li></ul><h3 id="实现">实现</h3><blockquote><p>通过http request header 头传递参数, 主要包括</p></blockquote><ul><li><p><code>accessKey</code> : 调用的标识</p></li><li><p><code>secretKey</code>: 密钥  ✨ 密钥不能放到请求头中</p></li><li><p>用户请求参数</p></li><li><p>签名<code>sign</code></p><ul><li>生成: 用户参数 + 密钥 + 签名生成算法(MD5、Hmac、Sha1) =&gt; 不可解密的值</li><li>验证: 服务端用一模一样的参数和算法生成新签名, 判断与请求头中的签名是否一致</li></ul></li><li><p><code>nonce</code>: 一个随机数, 只能用一次, 服务端要保存用过的随机数</p></li><li><p><code>timestamp</code>: 验证时间时间戳是否过期, 达到定时清理随机数的效果</p></li></ul><h3 id="分配accesskey和secretkey">分配accessKey和secretKey</h3><blockquote><p>在用户注册成功时自动分配 <code>accessKey</code> 和 <code>secretKey</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 分配 accessKey 和 secretKey</span></span><br><span class="line"><span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> DigestUtil.md5Hex(SALT + userAccount + RandomUtil.randomNumbers(<span class="number">5</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> DigestUtil.md5Hex(SALT + userAccount + RandomUtil.randomNumbers(<span class="number">8</span>));</span><br><span class="line"><span class="comment">// 4. 插入数据</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setAccessKey(accessKey);</span><br><span class="line">user.setSecretKey(secretKey);</span><br></pre></td></tr></table></figure><h3 id="作业">作业</h3><p>用户可以申请更换签名 – 有空可做</p><h2 id="🔗-客户端开发">🔗 客户端开发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用第三方接口的客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GATEWAY_HOST</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8103&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApiClient</span><span class="params">(String accessKey, String secretKey)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accessKey = accessKey;</span><br><span class="line">        <span class="built_in">this</span>.secretKey = secretKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNameByGet</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">//可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span></span><br><span class="line">        HashMap&lt;String, Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        paramMap.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpRequest.get(GATEWAY_HOST + <span class="string">&quot;/api/name&quot;</span>)</span><br><span class="line">                .form(paramMap)  <span class="comment">// 拼接参数</span></span><br><span class="line">                .addHeaders(getHeaderMap(<span class="string">&quot;&quot;</span>))  <span class="comment">// 增加请求头</span></span><br><span class="line">                .execute().body();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNameByPost</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlString</span> <span class="operator">=</span> GATEWAY_HOST + <span class="string">&quot;/api/name/&quot;</span> + name;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpUtil.post(urlString, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; <span class="title function_">getHeaderMap</span><span class="params">(String body)</span> &#123;</span><br><span class="line">        HashMap&lt;String, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;accessKey&quot;</span>, accessKey);</span><br><span class="line">        <span class="comment">// 一定不能发送给后端</span></span><br><span class="line">        <span class="comment">//hashMap.put(&quot;secretKey&quot;, secretKey);</span></span><br><span class="line">        hashMap.put(<span class="string">&quot;nonce&quot;</span>, RandomUtil.randomNumbers(<span class="number">4</span>));</span><br><span class="line">        hashMap.put(<span class="string">&quot;body&quot;</span>, URLEncoder.encode(body, StandardCharsets.UTF_8));</span><br><span class="line">        hashMap.put(<span class="string">&quot;timestamp&quot;</span>, String.valueOf(System.currentTimeMillis() / <span class="number">1000</span>));</span><br><span class="line">        hashMap.put(<span class="string">&quot;sign&quot;</span>, SignUtil.getSign(body, secretKey));</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsernameByPost</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.toJsonStr(user);</span><br><span class="line">        <span class="type">HttpResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> HttpRequest.post(GATEWAY_HOST + <span class="string">&quot;/api/name/user&quot;</span>)</span><br><span class="line">                .addHeaders(getHeaderMap(json))</span><br><span class="line">                .body(json)  <span class="comment">// post请求请求体</span></span><br><span class="line">                .execute();</span><br><span class="line">        System.out.println(httpResponse.getStatus());</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> httpResponse.body();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🔗-签名工具类">🔗 签名工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 签名加密</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSign</span><span class="params">(String body, String secretKey)</span> &#123;</span><br><span class="line">        <span class="type">Digester</span> <span class="variable">md5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Digester</span>(DigestAlgorithm.MD5);</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> body + <span class="string">&quot;.&quot;</span> + secretKey;</span><br><span class="line">        <span class="keyword">return</span> md5.digestHex(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🔗-配置类">🔗 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;api.client&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiClientConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ApiClient <span class="title function_">apiClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiClient</span>(accessKey, secretKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🔗-实现开发者引入sdk自动配置">🔗 实现开发者引入<code>SDK</code>自动配置</h2><blockquote><p>创建<code>resources\META-INF\spring.factories</code>文件, 写入以下内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spring boot starter</span></span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.gbbdxstx.gbbdxstxapiclientsdk.ApiClientConfig</span><br></pre></td></tr></table></figure><h1 id="rpc开发">RPC开发</h1><blockquote><p>作用: 使调用者像调用本地方法一样调用远程方法</p></blockquote><p>🎈 RPC模型:</p><img src="/Project/API%E5%B9%B3%E5%8F%B0/image-20240805131518235.png" class="" title="image-20240805131518235"><h2 id="🔗-公共服务接口">🔗 公共服务接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网关服务公共接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用接口统计</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">invokeCount</span><span class="params">(<span class="type">long</span> userId, <span class="type">long</span> interfaceInfoId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ak,sk获取用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">getInvokeUser</span><span class="params">(String accessKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据请求路径和方法获取接口信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    InterfaceInfo <span class="title function_">getInterfaceInfo</span><span class="params">(String url, String method)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🔗-提供者">🔗 提供者</h2><blockquote><p>启动类上要加<code>@EnableDubbo</code>注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserInterfaceInfoMapper userInterfaceInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> InterfaceInfoMapper interfaceInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新调用次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfaceInfoId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">invokeCount</span><span class="params">(<span class="type">long</span> userId, <span class="type">long</span> interfaceInfoId)</span> &#123;</span><br><span class="line">        <span class="comment">// 校验</span></span><br><span class="line">        ThrowUtils.throwIf(userId &lt;= <span class="number">0</span> || interfaceInfoId &lt;= <span class="number">0</span>, ErrorCode.PARAMS_ERROR);</span><br><span class="line">        <span class="comment">// 查询数据</span></span><br><span class="line">        QueryWrapper&lt;UserInterfaceInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;userId&quot;</span>, userId);</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;interfaceInfoId&quot;</span>, interfaceInfoId);</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;status&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">UserInterfaceInfo</span> <span class="variable">userInterfaceInfo</span> <span class="operator">=</span> userInterfaceInfoMapper.selectOne(queryWrapper);</span><br><span class="line">        ThrowUtils.throwIf(userInterfaceInfo == <span class="literal">null</span>, ErrorCode.NO_AUTH_ERROR);</span><br><span class="line">        userInterfaceInfo.setInvokeNum(userInterfaceInfo.getInvokeNum() + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 判断是否要更新用户接口状态</span></span><br><span class="line">        <span class="keyword">if</span> (userInterfaceInfo.getTotalNum() == userInterfaceInfo.getInvokeNum()) &#123;</span><br><span class="line">            userInterfaceInfo.setStatus(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新数据库 将调用次数 + 1 同时状态改变时更新状态</span></span><br><span class="line">        <span class="keyword">return</span> userInterfaceInfoMapper.updateById(userInterfaceInfo) == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ak,sk获得用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getInvokeUser</span><span class="params">(String accessKey)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(accessKey)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">queryWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;accessKey&quot;</span>, accessKey);</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据路径和方法获得接口信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InterfaceInfo <span class="title function_">getInterfaceInfo</span><span class="params">(String url, String method)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(url, method)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">queryWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;method&quot;</span>, method);</span><br><span class="line">        <span class="keyword">return</span> interfaceInfoMapper.selectOne(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🔗-网关调用">🔗 网关调用</h2><blockquote><p>启动类上要加<code>@EnableDubbo</code>注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入公共服务接口</span></span><br><span class="line"><span class="meta">@DubboReference</span></span><br><span class="line"><span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">...调用提供的方法</span><br></pre></td></tr></table></figure><h1 id="网关模块开发">网关模块开发</h1><blockquote><p>模块: api-gateway</p><p>目的: 利用网关实现统一处理不同项目不同请求的统一操作</p><p>功能: 实现路由转发, 黑白名单, 打印日志, 进行用户鉴权, 流量染色, 统计调用次数等功能</p><p>实现方法: 利用 Spring Cloud Gateway + Dubbo + Nacos实现网关功能</p></blockquote><p>🔗 配置信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 路由转发: 前置匹配断言</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">api_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8102</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=source,</span> <span class="string">gbbdxstx</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-springboot-demo-consumer</span></span><br><span class="line">    <span class="attr">logger:</span> <span class="string">slf4j</span></span><br><span class="line">    <span class="attr">qos-port:</span> <span class="number">33333</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://$&#123;nacos.address:127.0.0.1&#125;:8848?username=nacos&amp;password=nacos</span></span><br><span class="line">    <span class="attr">cache-file:</span> <span class="string">D:/software/nacos/.mapping.dubbo.cache</span></span><br></pre></td></tr></table></figure><p>🔗 全局请求过滤器</p><blockquote><p>业务逻辑:</p><ul><li>用户发送请求转发到 API 网关</li><li>请求日志</li><li>黑白名单</li><li>用户鉴权（判断 accessKey, secretKey 是否合法）</li><li>判断请求的模拟接口是否存在</li><li><strong>请求转发，调用模拟接口</strong></li><li>响应日志</li><li>调用成功，次数 + 1</li><li>调用失败，返回一个规范的错误码</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局请求过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DubboReference</span></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; IP_WHITE_LIST = Arrays.asList(<span class="string">&quot;0:0:0:0:0:0:0:1&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.请求日志</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="comment">// 获得请求到网关的完整url信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originUrl</span> <span class="operator">=</span> request.getURI().toString();</span><br><span class="line">        <span class="comment">// 获得网关转发后的路由信息</span></span><br><span class="line">        <span class="type">Route</span> <span class="variable">route</span> <span class="operator">=</span> exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR);</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlBefore</span> <span class="operator">=</span> route.getUri().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> urlBefore +  request.getPath().value();</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod().toString();</span><br><span class="line">        log.info(<span class="string">&quot;请求唯一标识: &#123;&#125;&quot;</span>, request.getId());</span><br><span class="line">        log.info(<span class="string">&quot;请求路径: &#123;&#125;&quot;</span>, url);</span><br><span class="line">        log.info(<span class="string">&quot;请求方法: &#123;&#125;&quot;</span>, method);</span><br><span class="line">        log.info(<span class="string">&quot;请求参数: &#123;&#125;&quot;</span>, request.getQueryParams());</span><br><span class="line">        <span class="type">String</span> <span class="variable">sourceAddress</span> <span class="operator">=</span> request.getLocalAddress().getHostString();</span><br><span class="line">        log.info(<span class="string">&quot;请求来源地址: &#123;&#125;&quot;</span>, sourceAddress);</span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.黑白名单</span></span><br><span class="line">        <span class="keyword">if</span> (!IP_WHITE_LIST.contains(sourceAddress)) &#123;</span><br><span class="line">            response.setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 用户鉴权(判断 ak,sk 是否合法)</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> request.getHeaders();</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;accessKey&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;nonce&quot;</span>);</span><br><span class="line">        <span class="comment">// 请求体</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedBody</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;body&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> URLDecoder.decode(encodedBody, StandardCharsets.UTF_8);</span><br><span class="line">        <span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;timestamp&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;sign&quot;</span>); <span class="comment">// 用户传过来的密钥</span></span><br><span class="line">        <span class="comment">// 实际情况去数据库中查询是否分配给用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">invokeUser</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            invokeUser = demoService.getInvokeUser(accessKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;getInvokeUser error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (invokeUser == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleNoAuth(response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// todo 随机数nonce 利用hashmap或redis存进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (Long.parseLong(nonce) &gt; <span class="number">10000L</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleNoAuth(response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// todo 时间和当前时间不能超过 5 分钟</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">FIVE_MINUTES</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">5L</span>;</span><br><span class="line">        <span class="keyword">if</span> (currentTime - Long.parseLong(timestamp) &gt; FIVE_MINUTES) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleNoAuth(response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将分配给用户的secretKey从数据库查出来用于生成sign</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> invokeUser.getSecretKey();</span><br><span class="line">        <span class="type">String</span> <span class="variable">serverSign</span> <span class="operator">=</span> SignUtil.getSign(body, secretKey);</span><br><span class="line">        <span class="keyword">if</span> (sign == <span class="literal">null</span> || !sign.equals(serverSign)) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleNoAuth(response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断请求的模拟接口是否存在</span></span><br><span class="line">        <span class="type">InterfaceInfo</span> <span class="variable">interfaceInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            interfaceInfo = demoService.getInterfaceInfo(url, method);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;getInterfaceInfo error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (interfaceInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleNoAuth(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 将网关信息加入请求头中</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">mutatedRequest</span> <span class="operator">=</span> request.mutate()</span><br><span class="line">            .header(<span class="string">&quot;Gateway-Flag&quot;</span>, <span class="string">&quot;gbbdxstx&quot;</span>).build();</span><br><span class="line">        <span class="type">ServerWebExchange</span> <span class="variable">mutatedExchange</span> <span class="operator">=</span> exchange.mutate()</span><br><span class="line">            .request(mutatedRequest)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 请求转发, 调用模拟接口</span></span><br><span class="line">        Mono&lt;Void&gt; filter = chain.filter(mutatedExchange);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 响应日志 Mono是异步编程 因此上面代码调用模拟接口会在全局过滤器执行完毕后执行(易出现次数增加但调用接口失败的请求)</span></span><br><span class="line">        <span class="comment">// 下面代码实现先调用模拟接口再执行调用成功次数加一和返回响应日志的代码</span></span><br><span class="line">        log.info(<span class="string">&quot;响应: &#123;&#125;&quot;</span>, response.getStatusCode());</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> invokeUser.getId();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">interfaceInfoId</span> <span class="operator">=</span> interfaceInfo.getId();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DataBufferFactory</span> <span class="variable">bufferFactory</span> <span class="operator">=</span> response.bufferFactory();</span><br><span class="line">            <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (statusCode != HttpStatus.OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);<span class="comment">//降级处理返回数据</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ServerHttpResponseDecorator</span> <span class="variable">decoratedResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerHttpResponseDecorator</span>(response) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">writeWith</span><span class="params">(Publisher&lt;? extends DataBuffer&gt; body)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (body <span class="keyword">instanceof</span> Flux) &#123;</span><br><span class="line">                        Flux&lt;? <span class="keyword">extends</span> <span class="title class_">DataBuffer</span>&gt; fluxBody = Flux.from(body);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">super</span>.writeWith(fluxBody.buffer().map(dataBuffers -&gt; &#123;</span><br><span class="line">                            <span class="comment">// 7. 调用成功, 调用次数加1</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                demoService.invokeCount(userId, interfaceInfoId);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                log.error(<span class="string">&quot;invokeCount error&quot;</span>, e);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 合并多个流集合，解决返回体分段传输</span></span><br><span class="line">                            <span class="type">DataBufferFactory</span> <span class="variable">dataBufferFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultDataBufferFactory</span>();</span><br><span class="line">                            <span class="type">DataBuffer</span> <span class="variable">buff</span> <span class="operator">=</span> dataBufferFactory.join(dataBuffers);</span><br><span class="line">                            <span class="type">byte</span>[] content = <span class="keyword">new</span> <span class="title class_">byte</span>[buff.readableByteCount()];</span><br><span class="line">                            buff.read(content);</span><br><span class="line">                            DataBufferUtils.release(buff);<span class="comment">//释放掉内存</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 构建返回日志</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(content);</span><br><span class="line">                            List&lt;Object&gt; rspArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                            rspArgs.add(response.getStatusCode().value());</span><br><span class="line">                            rspArgs.add(exchange.getRequest().getURI());</span><br><span class="line">                            rspArgs.add(result);</span><br><span class="line">                            log.info(<span class="string">&quot;响应结果: &lt;-- &#123;&#125; &#123;&#125;\n&#123;&#125;&quot;</span>, rspArgs.toArray());</span><br><span class="line"></span><br><span class="line">                            getDelegate().getHeaders().setContentLength(result.getBytes().length);</span><br><span class="line">                            <span class="keyword">return</span> bufferFactory.wrap(result.getBytes());</span><br><span class="line">                        &#125;));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 8. 调用失败, 返回一个标准的错误码</span></span><br><span class="line">                        handleInvokeError(response);</span><br><span class="line">                        log.error(<span class="string">&quot;&lt;-- &#123;&#125; 响应code异常&quot;</span>, getStatusCode());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">super</span>.writeWith(body);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange.mutate().response(decoratedResponse).build());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;网关处理响应异常&quot;</span> + e);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">handleNoAuth</span><span class="params">(ServerHttpResponse response)</span> &#123;</span><br><span class="line">        response.setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">        <span class="keyword">return</span> response.setComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">handleInvokeError</span><span class="params">(ServerHttpResponse response)</span> &#123;</span><br><span class="line">        response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span> response.setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="管理员统计分析开发">管理员统计分析开发</h1><h2 id="sql编写">SQL编写</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询热点数据</span><br><span class="line"><span class="keyword">select</span> interfaceInfoId,<span class="built_in">sum</span>(invokeNum) <span class="keyword">as</span> invokeNum <span class="keyword">from</span> user_interface_info <span class="keyword">group</span> <span class="keyword">by</span> interfaceInfoId <span class="keyword">order</span> <span class="keyword">by</span> invokeNum <span class="keyword">desc</span> limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>------------------------------------------------------------------待补充</p><h1 id="接口测试调用流程">接口测试调用流程</h1><ol><li>前端将用户输入的请求参数和要测试的接口id传到后端</li><li>后端对信息进行校验</li><li>校验成功后调用模拟接口</li></ol><h1 id="前端问题解决">前端问题解决</h1><h2 id="layout-max-但不生效"><code>layout = 'max'</code>但不生效</h2><blockquote><p>app.tst文件中获取全局默认设置</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当每个页面首次加载时, 获取要全局保存的数据, 比如用户登录信息和全局默认设置</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">state</span>: <span class="title class_">InitialState</span> = &#123;</span><br><span class="line"><span class="attr">loginUser</span>: <span class="literal">undefined</span>,</span><br><span class="line"><span class="attr">settings</span>: defaultSettings,  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在return中展开设置</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    ...initialState?.<span class="property">settings</span>,  <span class="comment">// 展开 initialState 中的设置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/JavaSE/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/JavaSE/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="类和对象">类和对象</h1><h2 id="类的定义">类的定义</h2><p>类的组成是由属性和行为两部分组成</p><ul><li><p>属性：在类中通过成员变量来体现（类中方法外的变量）</p></li><li><p>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 类名&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="comment">//构造器(可选)</span></span><br><span class="line">    <span class="comment">//代码块(可选)</span></span><br><span class="line">    <span class="comment">//内部类(可选)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="对象的使用">对象的使用</h2><ul><li>创建对象的格式：<ul><li>类名 对象名 = new 类名();</li></ul></li><li>调用成员的格式：<ul><li><code>对象名.成员变量</code></li><li><code>对象名.成员方法();</code></li></ul></li></ul><h2 id="工具类">工具类</h2><ul><li>帮助我们做一些事情，但不描述任何事物的类</li></ul><h3 id="私有化构造方法">私有化构造方法</h3><ul><li><p>外界不可以创建此类的对象，因为这个类不描述任何事物，因此创建这个类的对象没有意义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Math</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Math</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="方法定义为静态">方法定义为静态</h3><ul><li>因为外界不可以创建此类对象，因此需要将方法全部定义为静态，以供使用</li></ul><h1 id="封装">封装</h1><h2 id="封装思想">封装思想</h2><ul><li><p>对象代表什么，就得封装对应的数据，并提供数据对应的行为。eg：人画圆，画圆这种行为应定义在圆中</p></li><li><p>封装代码实现：</p><p>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问<br>成员变量private，提供对应的getXxx()/setXxx()方法</p></li></ul><h2 id="private">private</h2><p>private是一个修饰符，可以用来修饰成员（成员变量，成员方法）</p><ul><li>被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作<ul><li>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</li><li>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</li></ul></li></ul><h2 id="成员变量-局部变量-this">成员变量|局部变量|this</h2><p>成员变量:直接定义在类中</p><p>局部变量:在类的某个方法中定义的变量</p><p>this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）</p><ul><li>this：代表方法调用者的地址值</li><li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li><li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li></ul><h2 id="构造方法">构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line"><span class="comment">//功能：完成对象数据的初始化</span></span><br><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">    修饰符 类名(参数)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法的创建</li></ul><p>如果没有定义构造方法，系统将给出一个默认的无参数构造方法<br>如果定义了构造方法，系统将不再提供默认的构造方法</p><ul><li>构造方法的重载</li></ul><p>如果自定义了带参构造方法，还要使用无参数构造方法，就<u>必须再写一个无参数构造方法</u></p><h1 id="static关键字">static关键字</h1><ul><li>static表示静态，是Java中的一个修饰符，可以修饰成员方法，成员变量</li><li>被static修饰的成员变量/方法，叫做静态变量/方法</li></ul><h2 id="静态变量">静态变量</h2><h3 id="特点">特点</h3><ul><li>被该类所有对象所共享，即当所用对象的此变量皆相同时，使用static修饰此成员变量</li><li>不属于对象，属于类</li><li>随着类的加载而被加载到静态区中，优先于对象存在</li></ul><h3 id="访问">访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1(推荐)</span></span><br><span class="line">类名.静态变量;</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">对象名调用</span><br></pre></td></tr></table></figure><h2 id="静态方法">静态方法</h2><h3 id="特点">特点</h3><ul><li>多用在测试类和工具类中</li><li>javabean类中很少使用</li></ul><h3 id="访问">访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1(推荐)</span></span><br><span class="line">类名.静态方法();</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">对象名调用</span><br></pre></td></tr></table></figure><h2 id="static注意事项">static注意事项</h2><ul><li><p>静态方法只能访问静态变量和静态方法</p><p>​静态随类的加载而加载，在对象之前便存在，故不可以访问非静态的东西</p><p>​因此测试类中<code>Main()</code>方法外的其他方法也必须被static修饰</p></li><li><p>非静态方法可以访问所有变量和方法</p></li><li><p>静态方法中<u>没有this关键字</u>，也<u>没有super关键字</u></p><p>​静态方法不属于对象，而属于类，不需要对象来调用，故没有this关键字</p></li></ul><h1 id="继承">继承</h1><h2 id="概念">概念</h2><ul><li><p>继承是面向对象三大特征之一，可以让类跟类之间产生子父的关系，子类可以调用父类中的代码，提高复用性</p></li><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 子类 extends 父类 &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="特点">特点</h2><blockquote><p>顶层父类是Object类。所有的类默认继承Object，作为父类。</p></blockquote><ul><li><p>Java只支持单继承，不支持多继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个类只能有一个直接父类，不可以有多个直接父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;  <span class="comment">//√</span></span><br><span class="line"><span class="comment">//class C2 extends A,B &#123;&#125; //×</span></span><br></pre></td></tr></table></figure></li><li><p>一个类可以有多个子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A可以有多个子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C2</span> <span class="keyword">extends</span> <span class="title class_">B</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以多层继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">C1</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="字类可以继承父类的哪些内容？">字类可以继承父类的哪些内容？</h2><table><thead><tr><th style="text-align:center">内容</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">构造方法</td><td style="text-align:center">非私有–不能</td><td style="text-align:center">private–不能</td></tr><tr><td style="text-align:center">成员变量</td><td style="text-align:center">非私有–能</td><td style="text-align:center">private–能</td></tr><tr><td style="text-align:center">成员方法</td><td style="text-align:center">虚方法–能</td><td style="text-align:center">否则–不能</td></tr></tbody></table><p>虚方法：<code>非private 和 非static 和 非final修饰的方法</code></p><h3 id="注意">注意</h3><ul><li>子类只能访问父类中的非私有成员</li><li>子类不能继承父类的私有属性，但是如果子类中公有的方法影响到了父类私有属性，那么私有属性是能够被子类使用的。</li></ul><h2 id="继承后访问特点">继承后访问特点</h2><h3 id="成员变量">成员变量</h3><p>就近原则</p><ul><li><p>先在局部位置找，本类成员位置找，父类成员位置找，逐级往上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出现重名的成员变量怎么办？</span></span><br><span class="line">System.out.println(name);<span class="comment">//从局部位置开始往上找--通常指的是子类方法中定义的name</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.name);<span class="comment">//从本类成员位置开始往上找  --通常指的是子类成员变量的name</span></span><br><span class="line">System.out.println(<span class="built_in">super</span>.name);<span class="comment">//从父类成员位置开始往上找    --通常指的是父类成员变量的name</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="成员方法">成员方法</h3><ul><li>this调用：就近原则</li><li>super调用：直接找父类</li></ul><h3 id="构造方法">构造方法</h3><p>构造方法的作用是初始化对象成员变量数据的。所以子类的初始化过程中，必须先执行父类的初始化动作。子类的构造方法中默认有一个<code>super()</code> ，表示调用父类的构造方法，父类成员变量初始化后，才可以给子类使用。（<strong>先有爸爸，才能有儿子</strong>）</p><ul><li>子类不能继承父类的构造方法，但是可以通过super调用</li><li>默认先访问父类中无参的构造方法，再执行自己</li><li>子类构造方法的第一行，有一个默认的<code>super()</code>，默认先调用父类的无参构造方法，因此<code>super()</code>可以省略不写，但如果想要调用父类有参构造，必须在第一行手动书写<code>super(参数...)</code></li></ul><h2 id="super-和this"><code>super()</code>和<code>this()</code></h2><h3 id="调用构造方法">调用构造方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">super(...) -- 调用父类的构造方法，根据参数匹配确认</span><br><span class="line">this(...) -- 调用本类的其他构造方法，根据参数匹配确认</span><br></pre></td></tr></table></figure><h3 id="注意">注意</h3><ul><li><p>super(…)是根据参数去确定调用父类哪个构造方法的。</p></li><li><p>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</p></li><li><p>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</p></li></ul><h2 id="方法重写">方法重写</h2><h3 id="概念与本质">概念与本质</h3><ul><li>子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。</li><li>覆盖虚方法表中的方法。因为只有可以添加到虚方法表中的虚方法才可以被继承</li></ul><h3 id="使用场景">使用场景</h3><ul><li>子类继承了父类的方法，但子类觉得父类的这方法不足以满足自己的需求，子类便可以重写了一个与父类同名的方法。</li></ul><h3 id="override注解">@override注解</h3><ul><li>@override可以校验重写是否正确，可读性更好</li></ul><h3 id="重写方法基本要求">重写方法基本要求</h3><ul><li>子类重写的方法尽量跟父类中的方法保持一致</li><li>只有虚方法表里面的方法可以被重写。因为只有可以添加到虚方法表中的虚方法才可以被继承</li></ul><h1 id="多态">多态</h1><h2 id="概念与注意">概念与注意</h2><h3 id="概念">概念</h3><ul><li><p>多态是继封装和继承之后，面向对象的第三大特征</p></li><li><p>同种类型的对象，表现出的不同形态；即通过父类指向不同的子类，使传递父类对象后可以调用不同子类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line">父类类型 对象名称 = 子类对象;</span><br></pre></td></tr></table></figure></li></ul><h3 id="注意">注意</h3><ul><li>使用父类型作为参数，可以接收所有子类对象</li><li>当一个方法的形参是一个类，我们可以传递这个类所有的子类对象。</li><li>当一个方法的形参是一个接口，我们可以传递这个接口所有的实现类对象（后面会学）。</li><li>而且多态还可以根据传递的不同对象来调用不同类中的方法。</li></ul><h2 id="使用前提">使用前提</h2><ul><li>有继承/实现关系  <code>extends</code></li><li>有父类引用指向子类对象  <code>父类类型 对象名称 = 子类对象;</code></li><li>有方法重写(因为不重写多态没意义)  <code>@override</code></li></ul><h2 id="多态运行的特点">多态运行的特点</h2><h3 id="调用成员变量">调用成员变量</h3><ul><li><p>编译看左边，运行看左边</p></li><li><p><code>f</code>是<code>Fu</code>类型的，所以默认会从<code>Fu</code>这个类中去找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line"><span class="comment">//编译看左边的父类中有没有name这个属性，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，把左边父类name属性的值打印出来</span></span><br><span class="line">System.out.println(f.name);</span><br></pre></td></tr></table></figure></li></ul><h3 id="调用成员方法">调用成员方法</h3><ul><li><p>编译看左边，运行看右边</p></li><li><p><code>f</code>是<code>Fu</code>类型的，所以默认会从<code>Fu</code>这个类中去找，但是多态使用时代表子类已经对方法进行了重写，那么虚方法表中是会把父类方法进行覆盖，因此调用的是子类中重写的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line"><span class="comment">//编译看左边的父类中有没有show这个方法，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，运行的是子类中的show方法</span></span><br><span class="line">f.show();</span><br></pre></td></tr></table></figure></li></ul><h2 id="多态的弊端和类型转换">多态的弊端和类型转换</h2><h3 id="多态的弊端">多态的弊端</h3><ul><li>多态编译阶段是看左边父类类型的，如果子类有些独有的功能(方法)，此时<strong>多态的写法就无法访问子类独有功能了</strong>。</li></ul><h3 id="类型转换">类型转换</h3><ul><li><p>因为多态的弊端，所以想要调用子类的独有功能必须向下转型</p></li><li><p>向上转型（自动转换）  –  小–&gt;大，自动转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当父类引用指向一个子类对象时，便是向上转型。</span></span><br><span class="line">父类类型  变量名 = <span class="keyword">new</span> 子类类型();</span><br><span class="line">如：<span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure></li><li><p>向下转型（强制转换）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。</span></span><br><span class="line">子类类型 变量名 = (子类类型) 父类变量名;</span><br><span class="line">如:<span class="type">Aniaml</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">   <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span>(Cat) a;  </span><br></pre></td></tr></table></figure></li><li><p>类型转换的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向上转型  </span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下转型  </span></span><br><span class="line"><span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">d.watchHouse();        <span class="comment">// 调用的是 Dog 的 watchHouse 【运行报错】</span></span><br><span class="line"><span class="comment">//报出了ClassCastException，类型转换异常！这是因为，明明创建了Cat类型对象，运行时，当然不能转换成Dog对象的。</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="instanceof关键字">instanceof关键字</h3><ul><li><p>为了避免ClassCastException的发生，Java提供了 <code>instanceof</code> 关键字，给引用变量做类型的校验，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向下转型  </span></span><br><span class="line"><span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">    <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">    c.catchMouse();        <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">    <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">    d.watchHouse();       <span class="comment">// 调用的是 Dog 的 watchHouse</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新特性</span></span><br><span class="line"><span class="comment">//先判断a是否为Dog类型，如果是，则强转成Dog类型，转换之后变量名为d</span></span><br><span class="line"><span class="comment">//如果不是，则不强转，结果直接是false</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;</span><br><span class="line">    d.lookHome();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;</span><br><span class="line">    c.catchMouse();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="包">包</h1><ul><li>使用同一个包中的类时，不需要导包</li><li>使用<code>java.lang</code>包中的类时，不需要导包</li><li>其他情况都需要导包</li><li>如果同时使用两个包中的同名类时，需要使用全类名：<code>包名 + 类名</code></li></ul><h1 id="final关键字">final关键字</h1><h2 id="概念">概念</h2><ul><li><p><code>final</code>：不可改变，最终的含义。可以用于修饰类、方法和变量。</p></li><li><p>修饰类：表示该类为最终类，不能被继承</p></li><li><p>修饰方法：表示该方法是最终方法，不能被重写</p></li><li><p>修饰变量：叫做常量，只能被赋值一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：修饰成员变量时，涉及初始化问题，成员变量可以显示初始化or构造方法初始化，一个变量两者只能选择其一</span></span><br><span class="line"><span class="comment">//显示初始化：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法初始化</span></span><br><span class="line"><span class="comment">//注意：每个构造方法中都需要赋值一次</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="常量">常量</h2><h3 id="命名规范">命名规范</h3><ul><li>单个单词：全部大写</li><li>多个单词：全部大写，单词之间用下划线隔开</li></ul><h3 id="细节">细节</h3><ul><li>final修饰的是基本数据类型，那么变量存储的<u>数据值</u>是不可改变的</li><li>final修饰的是引用数据类型，那么变量存储的<u>地址值</u>是不能发生改变的，对象内部的属性值是可以改变的</li></ul><h1 id="权限修饰符">权限修饰符</h1><table><thead><tr><th></th><th>public</th><th>protected</th><th>默认</th><th>private</th></tr></thead><tbody><tr><td>同一类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一包中的类</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>不同包的子类中</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>不同包中的无关类</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><p>public具有最大权限。private则是最小权限。编写代码时，如果没有特殊的考虑，建议这样使用权限：</p><ul><li>成员变量使用<code>private</code> ，隐藏细节。</li><li>构造方法使用<code> public</code> ，方便创建对象。</li><li>成员方法使用<code>public</code> ，方便调用方法。<ul><li>如果类中的某个成员方法是抽取其他成员方法中的共性代码，这个方法一般也私有，因为这些共性代码一般不希望被别的类调用</li></ul></li></ul><blockquote><p>小贴士：不加权限修饰符，就是默认权限</p></blockquote><h1 id="代码块">代码块</h1><ul><li>分类<ul><li>局部代码块，构造代码块，静态代码块</li></ul></li><li>局部代码块的作用<ul><li>提前结束变量的声明周期（已淘汰）</li></ul></li><li>构造代码块的作用<ul><li>抽取构造方法中的重复代码（不够灵活）</li></ul></li></ul><h2 id="静态代码块-star">静态代码块:star:</h2><ul><li><p>格式</p><ul><li><pre><code class="language-java">static &#123;    &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 特点</span><br><span class="line"></span><br><span class="line">  - 随着类的加载而加载，并且自动触发，&lt;u&gt;只执行一次&lt;/u&gt;</span><br><span class="line"></span><br><span class="line">- 使用场景</span><br><span class="line"></span><br><span class="line">  - 在类加载时，做一些数据初始化的时候使用</span><br><span class="line"></span><br><span class="line">- 执行顺序</span><br><span class="line"></span><br><span class="line">  - 静态代码块 --&gt;  构造代码块  --&gt; 构造方法</span><br><span class="line">  - [(3条消息) java中静态代码块详解_这辈子_安静的努力着的博客-CSDN博客_静态代码块](https://blog.csdn.net/qq_35868412/article/details/89360250)</span><br><span class="line"></span><br><span class="line"># 抽象类</span><br><span class="line"></span><br><span class="line">## 作用</span><br><span class="line"></span><br><span class="line">- 抽取共性时，无法确定方法体，就把方法定义为抽象的。</span><br><span class="line">- 强制让子类按照某种格式重写</span><br><span class="line">- 抽象方法所在的类，必须是抽象类</span><br><span class="line"></span><br><span class="line">## abstract格式</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//抽象类</span><br><span class="line">public abstract class 类名&#123;&#125;</span><br><span class="line">//抽象方法</span><br><span class="line">public abstract 返回值类型 方法名(参数列表);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="注意-star">注意:star:</h2><p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ul><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote></li><li><p>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则子类也必须定义成抽象类，编译无法通过而报错。</p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li><li><p>抽象类存在的意义是为了被子类继承。</p><blockquote><p>理解：抽象类中已经实现的是模板中确定的成员，抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。</p></blockquote></li></ul><h1 id="接口">接口</h1><h2 id="作用">作用</h2><ul><li>由继承可知所有子类的共性被抽取到父类中，但当某个共性不是全部子类，只是部分子类的共性时，这时就需要使用接口来定义这一共性(规则)，只需让这些部分子类实现接口即可</li><li>接口是更加彻底的抽象，在JDK7之前，接口中全是抽象方法。接口同样是不能创建对象的</li></ul><h2 id="格式">格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口的定义格式，默认在interface前面会有abstract</span></span><br><span class="line">interface 接口名&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口，接口是可以多实现的</span></span><br><span class="line">class 类名 implements 接口<span class="number">1</span>,接口<span class="number">2.</span>..&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口成员的特点">接口成员的特点</h2><ul><li>在JDK7，包括JDK7之前，接口中的<strong>只有</strong>包含：抽象方法和常量</li><li>接口中<strong>没有</strong>构造方法，因为接口不能创建对象同时也不需要给子类的成员变量赋值。</li><li>JDK8的新特性，接口中可以定义有方法体的方法</li><li>JDK9的新特性，接口中可以定义私有方法</li></ul><h3 id="抽象方法">抽象方法</h3><ul><li>注意：接口中的抽象方法默认会自动加上public abstract修饰程序员无需自己手写！！</li><li>按照规范：以后接口中的抽象方法建议不要写上public abstract。因为没有必要啊，默认会加上。</li></ul><h3 id="常量">常量</h3><ul><li>在接口中定义的成员变量默认会加上： public static final修饰。也就是说在接口中定义的成员变量实际上是一个常量。这里是使用public static final修饰后，变量值就不可被修改，并且是静态化的变量可以直接用接口名访问，所以也叫常量。常量必须要给初始值。常量命名规范建议字母全部大写，多个单词用下划线连接。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterF</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法！</span></span><br><span class="line">    <span class="comment">//    public abstract void run();</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract String getName();</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract int add(int a , int b);</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 它的最终写法是：</span></span><br><span class="line">    <span class="comment">// public static final int AGE = 12 ;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AGE</span>  <span class="operator">=</span> <span class="number">12</span>; <span class="comment">//常量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">SCHOOL_NAME</span> <span class="operator">=</span> <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口和类的关系">接口和类的关系</h2><h3 id="类和类的关系">类和类的关系</h3><ul><li>继承关系，只能单继承，不能多继承，但是可以多层继承</li></ul><h3 id="类和接口的关系">类和接口的关系</h3><ul><li>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</li></ul><h3 id="接口和接口的关系">接口和接口的关系</h3><ul><li>继承关系，可以单继承，也可以多继承</li><li>细节：如果类实现了最下面的子接口，那么就需要重写所有的抽象方法</li></ul><h2 id="注意-star">注意:star:</h2><p>关于接口的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li>当两个接口中存在相同抽象方法的时候，该怎么办？</li></ol><blockquote><p>只要重写一次即可。此时重写的方法，既表示重写1接口的，也表示重写2接口的。</p></blockquote><ol start="2"><li>实现类能不能继承A类的时候，同时实现其他接口呢？</li></ol><blockquote><p>继承的父类，就好比是亲爸爸一样<br>实现的接口，就好比是干爹一样<br>可以继承一个类的同时，再实现多个接口，只不过，要把接口里面所有的抽象方法，全部实现。</p></blockquote><ol start="3"><li>实现类能不能继承一个抽象类的时候，同时实现其他接口呢？</li></ol><blockquote><p>实现类可以继承一个抽象类的同时，再实现其他多个接口，只不过要把里面所有的抽象方法全部重写。</p></blockquote><ol start="4"><li>实现类Zi，实现了一个接口，还继承了一个Fu类。假设在接口中有一个方法，父类中也有一个相同的方法。子类如何操作呢？</li></ol><blockquote><p>处理办法一：如果父类中的方法体，能满足当前业务的需求，在子类中可以不用重写。<br>处理办法二：如果父类中的方法体，不能满足当前业务的需求，需要在子类中重写。</p></blockquote><ol start="5"><li>如果一个接口中，有10个抽象方法，但是我在实现类中，只需要用其中一个，该怎么办?</li></ol><blockquote><p>可以在接口跟实现类中间，新建一个中间类（适配器类）<br>让这个适配器类去实现接口，对接口里面的所有的方法做空重写。<br>让子类继承这个适配器类，想要用到哪个方法，就重写哪个方法。<br>因为中间类没有什么实际的意义，所以一般会把中间类定义为抽象的，不让外界创建对象</p></blockquote><h2 id="新特性">新特性</h2><h3 id="jdk8以后接口新增的方法-默认方法">JDK8以后接口新增的方法-默认方法</h3><ul><li><p>概念</p><ul><li>允许在接口中定义默认方法，需要使用关键字<code>default</code>修饰</li><li>作用：解决接口升级后，实现类未重写新升级的方法而报错的问题</li></ul></li><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ul><li>默认方法不是抽象方法，所以不强制被重写，但是如果被重写，重写的时候去掉<code>default</code>关键字</li><li>public可以省略，default不能省略</li><li>如果实现了多个接口，多个接口存在相同名字的默认方法，子类就必须对该方法进行重写</li></ul></li></ul><h3 id="jdk8以后接口新增的方法-静态方法">JDK8以后接口新增的方法-静态方法</h3><ul><li><p>允许在接口中定义静态方法，需要用static修饰</p></li><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ul><li>静态方法只能通过接口名调用，不能通过实现类名或者对象名调用</li><li>public可以省略，static不能省略</li></ul></li></ul><h3 id="jdk9以后接口新增的方法-私有方法">JDK9以后接口新增的方法-私有方法</h3><ul><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式1 --供默认方法使用</span></span><br><span class="line"><span class="keyword">private</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式2  --供静态方法使用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="接口的应用">接口的应用</h2><ul><li>接口代表规则，是行为的抽象。想要让哪个类拥有一个行为，就让这个类实现对应的接口就行</li><li>当一个方法的参数是接口时，可以传递接口所有实现类的对象，这种方式称之为接口多态</li></ul><h2 id="适配器设计模式">适配器设计模式</h2><h3 id="作用">作用</h3><ul><li>解决接口和接口实现类之间的矛盾问题：接口实现类不想重写接口中的所有抽象方法</li></ul><h3 id="步骤">步骤</h3><ul><li>编写中间类XXXAdapter，实现对应的接口</li><li>对接口中的抽象方法进行空实现</li><li>让真正的接口实现类继承中间类，并重写需要用的方法</li><li>为了避免其他类创建适配器类的对象，中间的适配器类用<code>abstract</code>修饰</li><li>如果真正的实现类有其他的父类，由于java不能多继承故可以让中间类继承真正实现类的父类，达到间接继承</li></ul><h1 id="内部类">内部类</h1><h2 id="概述">概述</h2><ul><li>内部类表示的事务是外部类的一部分，内部类单独出现没有任何意义，比如汽车内有一个发动机</li></ul><h2 id="访问特点">访问特点</h2><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，必须创建对象，用内部类对象访问内部类的成员</li></ul><h2 id="分类">分类</h2><ul><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ul><h2 id="成员内部类">成员内部类</h2><ul><li>写在成员位置的，属于外部类的成员</li></ul><h3 id="获取方式">获取方式</h3><ul><li>方式一<ul><li>当成员内部类被private修饰时，在外部类编写方法，返回内部类对象，达到对外提供内部类对象（类似set/get方法）</li></ul></li><li>方式二<ul><li>当成员内部类被非私有修饰时，直接创建对象：<code>Outer.Inner oi = new Outer().new Inner();</code></li></ul></li></ul><h3 id="注意">注意</h3><ul><li>外部类成员变量和内部类成员变量重名时，在内部类如何访问？<code>Sout(Outer.this.变量名)</code></li><li>内部类访问外部类的方法时，要用<code>Outer.this.方法名()</code></li></ul><h2 id="静态内部类">静态内部类</h2><h3 id="获取方式">获取方式</h3><ul><li><code>Outer.Inner oi = new Outer.Inner()</code></li></ul><h3 id="调用静态内部类中的方法">调用静态内部类中的方法</h3><ul><li>非静态方法：先创建对象，用对象调用</li><li>静态方法：外部类名.内部类名.方法名();</li></ul><h3 id="注意">注意</h3><ul><li>静态内部类可以直接访问外部类的静态成员。</li><li>静态内部类不可以直接访问外部类的非静态成员，如果要访问需要创建外部类的对象。</li><li>静态内部类中没有<code>Outer.this</code>，内外部类变量重名要访问外部类变量使用：<code>外部类.变量名</code></li></ul><h2 id="局部内部类">局部内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class 外部类名 &#123;</span><br><span class="line">数据类型 变量名;</span><br><span class="line"></span><br><span class="line">修饰符 返回值类型 方法名(参数列表) &#123;</span><br><span class="line"><span class="comment">// …</span></span><br><span class="line">class 内部类 &#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类-star">匿名内部类:star:</h2><h3 id="概念">概念</h3><ul><li>隐藏了名字的内部类，可以写在成员位置，也可以写在局部位置</li></ul><h3 id="格式">格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名/接口名() &#123;</span><br><span class="line">    重写方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格式的细节">格式的细节</h3><ul><li>包含了继承或实现，方法重写，创建对象。</li><li>整体就是一个类的子类或者接口的实现类对象</li></ul><h3 id="使用场景">使用场景</h3><ul><li>当方法的参数是接口或者类时，以接口为例，可以传递这个接口的实现类对象，如果实现类只要使用一次，就可以用匿名内部类简化代码</li></ul><h1 id="泛型">泛型</h1><h2 id="概述">概述</h2><ul><li><p>泛型的介绍</p><p>​泛型是JDK5中引入的特性，它提供了编译时类型安全检测机制</p></li><li><p>泛型的好处</p><ol><li>把运行时期的问题提前到了编译期间</li><li>避免了强制类型转换</li></ol></li><li><p>用于约束集合中存储元素的数据类型</p></li></ul><h2 id="细节">细节</h2><ul><li><p>泛型中不能写基本数据类型</p></li><li><p>指定泛型的具体类型后，传递数据时，可以传入该类型或者其子类类型</p></li><li><p>如果不写泛型，类型默认是Object，这样多态的弊端就显现出来：不能调用子类特有的功能</p></li><li><p>不能直接在静态方法中使用类的泛型类型参数，但静态方法本身可以声明自己的泛型类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法不能直接使用类的泛型参数 T</span></span><br><span class="line">    <span class="comment">// public static void print(T value) &#123;</span></span><br><span class="line">    <span class="comment">//     System.out.println(value);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法可以定义自己的泛型参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(U value)</span> &#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为静态方法属于类本身而不是类的实例。但静态方法可以声明自己的泛型参数，从而实现与泛型相关的功能。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="泛型类">泛型类</h2><ul><li><p>当定义一个类时，某个变量的类型不确定，就可以使用带有泛型的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名&lt;E&gt;&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="泛型方法">泛型方法</h2><ul><li><p>当方法中形参类型不确定的时候，可以使用泛型</p></li><li><p>只能在本方法中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符&lt;E&gt; 返回类型 方法名(参数...)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="泛型接口">泛型接口</h2><ul><li><p>当接口中类型不确定的时候，可以使用泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface 接口名&lt;E&gt;&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="泛型接口的使用">泛型接口的使用</h3><ul><li><p>实现类给出具体的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyList</span> <span class="keyword">implements</span> <span class="title class_">List</span>&lt;此处给出具体的类型&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类延续泛型，创建对象时在确定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyList&lt;此处给出具体的类型&gt; list = <span class="keyword">new</span> <span class="title class_">MyList</span>&lt;&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="泛型的不可继承性和通配符">泛型的不可继承性和通配符</h2><h3 id="不可继承性">不可继承性</h3><ul><li><p>泛型不具备继承性(一旦E的类型确定，便只能传递此类型)，但是数据具备继承性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Ye&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Fu&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Zi&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//泛型不具备继承性</span></span><br><span class="line">        method(list1);</span><br><span class="line">        method(list2); <span class="comment">// 报错，只能传递ArrayList&lt;Ye&gt;</span></span><br><span class="line">        method(list3); <span class="comment">// 报错，只能传递ArrayList&lt;Ye&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//数据具备继承性</span></span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">Fu</span>());  <span class="comment">// 可以将子类对象传递至父类集合中</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(ArrayList&lt;Ye&gt; list)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ye</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> <span class="keyword">extends</span> <span class="title class_">Ye</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>那么此时我就是想要用method方法添加ArrayList<Fu>和 ArrayList<Zi>集合应该怎么办？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对method方法进行修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;E&gt; <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(ArrayList&lt;E&gt; list)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//但是这样有一个弊端，method方法不仅ArrayList&lt;Ye/Fu/Zi&gt;可以接收，而且ArrayList&lt;Student&gt;也可以接收</span></span><br><span class="line"><span class="comment">//那我就是只想接收ArrayList&lt;Ye/Fu/Zi&gt;，应该怎么办呢?</span></span><br><span class="line"><span class="comment">//泛型的通配符 可以解决</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="泛型的通配符">泛型的通配符</h3><ul><li><p>概述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">?也表示不确定的类型，它可以进行类型的限定</span><br><span class="line">? <span class="keyword">extends</span> <span class="title class_">E</span>: 表示可以传递E或者E所有的子类类型</span><br><span class="line">? <span class="built_in">super</span> E: 表示可以传递E或者E所有的父类类型</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Ye&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Fu&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Zi&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Student&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//泛型不具备继承性</span></span><br><span class="line">        method(list1);</span><br><span class="line">        method(list2); </span><br><span class="line">        method(list3); </span><br><span class="line"></span><br><span class="line">        method(list4); <span class="comment">// 报错，因为使用通配符后，只能传递Ye和它所有的子类类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注意：在方法中使用泛型的通配符时，修饰符后面的&lt;E&gt;去掉不用写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(ArrayList&lt;? extends Ye&gt; list)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ye</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> <span class="keyword">extends</span> <span class="title class_">Ye</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>应用场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>如果我们在定义类、方法、接口的时候，如果类型不确定，就可以定义泛型类、泛型方法、泛型接口</span><br><span class="line"><span class="number">2.</span>如果类型不确定，但是能知道以后只能传递某个继承体系中的，就可以使用泛型的通配符</span><br><span class="line">关键点：泛型的通配符可以限定类型的范围</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索引擎项目</title>
      <link href="/Project/searchplatform/"/>
      <url>/Project/searchplatform/</url>
      
        <content type="html"><![CDATA[<h1 id="搜索引擎项目">搜索引擎项目</h1><h2 id="帖子搜索">帖子搜索</h2><h3 id="数据同步">数据同步</h3><ul><li>全量同步至ES  项目启动时将数据库数据存至ES</li><li>定时增量同步至ES  每一分钟进行保存 保存时判断时间 避免数据重复保存</li></ul><h3 id="搜索">搜索</h3><ul><li>使用es实现快速搜索</li></ul><h2 id="用户搜索">用户搜索</h2><h3 id="数据同步">数据同步</h3><ul><li>全量同步至ES 项目启动时将数据库数据存至ES</li><li>实时增量同步至ES 用户信息发生改变立刻将数据存至ES</li></ul><h3 id="搜索">搜索</h3><ul><li>使用es实现快速搜索</li></ul><h3 id="实现过程">实现过程</h3><p>1.创建user的es实体类</p><ul><li><code>UserEsDao</code>  继承<code>ElasticsearchRepository</code>实现基本的CRUD操作</li><li><code>UserEsDTO</code>  用户ES包装类, 与ES中user文档相对应</li></ul><p>2.使用<code>dev tools</code>创建user文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">PUT user_v1</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">64</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;userProfile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;userAvatar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isDelete&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>3.实现启动时全量同步至ES</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FullSyncUserToEs</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserEsDao userEsDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="comment">// 全量同步之前删除es中全部数据</span></span><br><span class="line">        userEsDao.deleteAll();</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = userService.list();</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isEmpty(userList)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;UserEsDTO&gt; userEsDTOList = userList.stream().map(UserEsDTO::objToDto).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> userEsDTOList.size();</span><br><span class="line">        log.info(<span class="string">&quot;FullSyncUserToEs start, total &#123;&#125;&quot;</span>, total);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; total; i += pageSize) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min(i + pageSize, total);</span><br><span class="line">            log.info(<span class="string">&quot;sync from &#123;&#125; to &#123;&#125;&quot;</span>, i, end);</span><br><span class="line">            userEsDao.saveAll(userEsDTOList.subList(i, end));</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;FullSyncUserToEs end, total &#123;&#125;&quot;</span>, total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.实现用户数据增量同步至ES</p><blockquote><p>JDK17使用Canal的注意事项</p><p>启动时报错:    Error: Could not create the Java Virtual Machine.</p><p>​Error: A fatal exception has occurred. Program will exit.</p><p>因为JDK17不支持PermSize参数故需要将start.bat中的:</p><p>set JAVA_MEM_OPTS= -Xms128m -Xmx512m -XX:PermSize=128m   修改为</p><p>set JAVA_MEM_OPTS=-Xms128m -Xmx512m</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IncSyncUserToEs</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserEsDao userEsDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CanalConnector connector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        connector = CanalConnectors.newSingleConnector(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(AddressUtils.getHostIp(),</span><br><span class="line">                <span class="number">11111</span>), <span class="string">&quot;example&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>::run).start(); <span class="comment">// 开一个单独的线程执行数据同步, 避免阻塞springboot主线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行增量同步</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">emptyCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connector.connect();</span><br><span class="line">            connector.subscribe(<span class="string">&quot;my_db.user&quot;</span>); <span class="comment">// 订阅user表</span></span><br><span class="line">            connector.rollback();</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> connector.getWithoutAck(batchSize);</span><br><span class="line">                <span class="type">long</span> <span class="variable">batchId</span> <span class="operator">=</span> message.getId();</span><br><span class="line">                <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> message.getEntries().size();</span><br><span class="line">                <span class="keyword">if</span> (batchId == -<span class="number">1</span> || size == <span class="number">0</span>) &#123;</span><br><span class="line">                    emptyCount++;</span><br><span class="line">                    <span class="keyword">if</span> (emptyCount &gt; <span class="number">3600</span>) &#123;  <span class="comment">// 每一小时重新开始计数</span></span><br><span class="line">                        emptyCount = <span class="number">0</span>;</span><br><span class="line">                        log.info(<span class="string">&quot;empty count : &#123;&#125;&quot;</span>, emptyCount);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    emptyCount = <span class="number">0</span>;</span><br><span class="line">                    processEntries(message.getEntries());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                connector.ack(batchId);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;empty too many times, exit&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connector.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processEntries</span><span class="params">(List&lt;Entry&gt; entries)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry entry : entries) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getEntryType() == EntryType.TRANSACTIONBEGIN || entry.getEntryType() == EntryType.TRANSACTIONEND) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            RowChange rowChange;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rowChange = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;ERROR ## parser of eromanga-event has an error , data:&quot;</span> + entry.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">EventType</span> <span class="variable">eventType</span> <span class="operator">=</span> rowChange.getEventType();</span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowChange.getRowDatasList()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eventType == EventType.INSERT) &#123;</span><br><span class="line">                    syncToEs(rowData.getAfterColumnsList(), <span class="string">&quot;insert&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType == EventType.UPDATE) &#123;</span><br><span class="line">                    syncToEs(rowData.getAfterColumnsList(), <span class="string">&quot;update&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType == EventType.DELETE) &#123;</span><br><span class="line">                    syncToEs(rowData.getBeforeColumnsList(), <span class="string">&quot;delete&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">syncToEs</span><span class="params">(List&lt;Column&gt; columns, String eventType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;insert&quot;</span>.equals(eventType) || <span class="string">&quot;update&quot;</span>.equals(eventType)) &#123;</span><br><span class="line">            <span class="comment">// 获取要更新或添加的用户数据</span></span><br><span class="line">            Map&lt;String, Object&gt; columnMap = getColumnMap(columns);</span><br><span class="line">            <span class="type">UserEsDTO</span> <span class="variable">userEsDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(columnMap, UserEsDTO.class);</span><br><span class="line">            log.info( <span class="string">&quot;&#123;&#125;前的数据总数: &#123;&#125;&quot;</span>, eventType, userEsDao.count());</span><br><span class="line">            userEsDao.save(userEsDTO);</span><br><span class="line">            log.info( <span class="string">&quot;&#123;&#125;后的数据总数: &#123;&#125;&quot;</span>, eventType, userEsDao.count());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;delete&quot;</span>.equals(eventType)) &#123;</span><br><span class="line">            <span class="comment">// 获取要删除的用户id</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Long.parseLong(getColumnValue(columns, <span class="string">&quot;id&quot;</span>));</span><br><span class="line">            log.info( <span class="string">&quot;&#123;&#125;前的数据总数: &#123;&#125;&quot;</span>, eventType, userEsDao.count());</span><br><span class="line">            userEsDao.deleteById(id);</span><br><span class="line">            log.info( <span class="string">&quot;&#123;&#125;后的数据总数: &#123;&#125;&quot;</span>, eventType, userEsDao.count());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">getColumnMap</span><span class="params">(List&lt;Column&gt; columns)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Column column : columns) &#123;</span><br><span class="line">            map.put(column.getName(), column.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getColumnValue</span><span class="params">(List&lt;Column&gt; columns, String columnName)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Column column : columns) &#123;</span><br><span class="line">            <span class="keyword">if</span> (column.getName().equals(columnName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> column.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        connector.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>实现es快速搜索</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;User&gt; <span class="title function_">searchFromEs</span><span class="params">(UserQueryRequest userQueryRequest)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> userQueryRequest.getId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> userQueryRequest.getUserName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userProfile</span> <span class="operator">=</span> userQueryRequest.getUserProfile();</span><br><span class="line">        <span class="comment">// es 起始页为 0</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> userQueryRequest.getCurrent() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">pageSize</span> <span class="operator">=</span> userQueryRequest.getPageSize();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sortField</span> <span class="operator">=</span> userQueryRequest.getSortField();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sortOrder</span> <span class="operator">=</span> userQueryRequest.getSortOrder();</span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQueryBuilder</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">// 过滤</span></span><br><span class="line">        boolQueryBuilder.filter(QueryBuilders.termQuery(<span class="string">&quot;isDelete&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">if</span> (id != <span class="literal">null</span>) &#123;</span><br><span class="line">            boolQueryBuilder.filter(QueryBuilders.termQuery(<span class="string">&quot;id&quot;</span>, id));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 按关键词检索</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(userName)) &#123;</span><br><span class="line">            boolQueryBuilder.should(QueryBuilders.matchQuery(<span class="string">&quot;userName&quot;</span>, userName));</span><br><span class="line">            boolQueryBuilder.should(QueryBuilders.matchQuery(<span class="string">&quot;userProfile&quot;</span>, userName));</span><br><span class="line">            boolQueryBuilder.minimumShouldMatch(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        SortBuilder&lt;?&gt; sortBuilder = SortBuilders.scoreSort();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(sortField)) &#123;</span><br><span class="line">            sortBuilder = SortBuilders.fieldSort(sortField);</span><br><span class="line">            sortBuilder.order(CommonConstant.SORT_ORDER_ASC.equals(sortOrder) ? SortOrder.ASC : SortOrder.DESC);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分页</span></span><br><span class="line">        <span class="type">PageRequest</span> <span class="variable">pageRequest</span> <span class="operator">=</span> PageRequest.of((<span class="type">int</span>) current, (<span class="type">int</span>) pageSize);</span><br><span class="line">        <span class="comment">// 构造查询</span></span><br><span class="line">        <span class="type">NativeSearchQuery</span> <span class="variable">searchQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>().withQuery(boolQueryBuilder)</span><br><span class="line">                .withPageable(pageRequest).withSorts(sortBuilder).build();</span><br><span class="line">        SearchHits&lt;UserEsDTO&gt; searchHits = elasticsearchRestTemplate.search(searchQuery, UserEsDTO.class);</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page.setTotal(searchHits.getTotalHits());</span><br><span class="line">        List&lt;User&gt; resourceList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 查出结果后，从 db 获取最新动态数据</span></span><br><span class="line">        <span class="keyword">if</span> (searchHits.hasSearchHits()) &#123;</span><br><span class="line">            List&lt;SearchHit&lt;UserEsDTO&gt;&gt; searchHitList = searchHits.getSearchHits();</span><br><span class="line">            List&lt;Long&gt; userIdList = searchHitList.stream().map(searchHit -&gt; searchHit.getContent().getId())</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">            List&lt;User&gt; userList = baseMapper.selectBatchIds(userIdList);</span><br><span class="line">            <span class="keyword">if</span> (userList != <span class="literal">null</span>) &#123;</span><br><span class="line">                Map&lt;Long, List&lt;User&gt;&gt; idUserMap = userList.stream().collect(Collectors.groupingBy(User::getId));</span><br><span class="line">                userIdList.forEach(userId -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (idUserMap.containsKey(userId)) &#123;</span><br><span class="line">                        resourceList.add(idUserMap.get(userId).get(<span class="number">0</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 从 es 清空 db 已物理删除的数据</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">delete</span> <span class="operator">=</span> elasticsearchRestTemplate.delete(String.valueOf(userId), UserEsDTO.class);</span><br><span class="line">                        log.info(<span class="string">&quot;delete user &#123;&#125;&quot;</span>, delete);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        page.setRecords(resourceList);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="关键词高亮">关键词高亮</h2><blockquote><p>在es搜索中增加高亮配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高亮</span></span><br><span class="line"><span class="type">HighlightBuilder</span> <span class="variable">highlightBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>();</span><br><span class="line">highlightBuilder.field(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">highlightBuilder.field(<span class="string">&quot;userProfile&quot;</span>);</span><br><span class="line"><span class="comment">//highlightBuilder.preTags(&quot;&lt;span class=&#x27;highlight&#x27;&gt;&quot;); // 设置高亮前标签  增加高亮style</span></span><br><span class="line">highlightBuilder.preTags(<span class="string">&quot;&lt;span style=\&quot;background: yellow;\&quot;&gt;&quot;</span>); <span class="comment">// 设置高亮前标签  背景为黄色</span></span><br><span class="line">highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>); <span class="comment">// 设置高亮后标签</span></span><br><span class="line"><span class="comment">// 构造查询</span></span><br><span class="line"><span class="type">NativeSearchQuery</span> <span class="variable">searchQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>()</span><br><span class="line">    .withQuery(boolQueryBuilder)</span><br><span class="line">    .withPageable(pageRequest)</span><br><span class="line">    .withSorts(sortBuilder)</span><br><span class="line">    .withHighlightBuilder(highlightBuilder) <span class="comment">// 添加高亮</span></span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><blockquote><p>将高亮字段设置到返回数据中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> idUserMap.get(userId).get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 提取高亮字段设置到user对象中</span></span><br><span class="line">searchHits.forEach(searchHit -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (searchHit.getContent().getId().equals(userId)) &#123;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; highlightFields = searchHit.getHighlightFields();</span><br><span class="line">        <span class="keyword">if</span> (highlightFields.containsKey(<span class="string">&quot;userName&quot;</span>)) &#123;</span><br><span class="line">            user.setUserName(String.join(<span class="string">&quot;&quot;</span>, highlightFields.get(<span class="string">&quot;userName&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (highlightFields.containsKey(<span class="string">&quot;userProfile&quot;</span>)) &#123;</span><br><span class="line">            user.setUserProfile(String.join(<span class="string">&quot;&quot;</span>, highlightFields.get(<span class="string">&quot;userProfile&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">resourceList.add(user);</span><br></pre></td></tr></table></figure><blockquote><p>例子: 返回值如下  搜索关键词 “旅游”</p></blockquote><img src="/Project/searchplatform/image-20240717201227522.png" class="" title="image-20240717201227522"><h2 id="压力测试">压力测试</h2><blockquote><p>1s内100个线程</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;searchText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;鱼皮&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;post&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>不使用es时:</li></ul><img src="/Project/searchplatform/image-20240717180254909.png" class="" title="image-20240717180254909"><ul><li>使用es时</li></ul><img src="/Project/searchplatform/image-20240717180622011.png" class="" title="image-20240717180622011"><h2 id="下拉联想词">下拉联想词</h2><blockquote><p>二次更新: 实现了先对搜索词进行分词再获取推荐词</p></blockquote><h3 id="用户部分">用户部分</h3><ul><li>更改es索引</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">DELETE user_v1</span><br><span class="line"></span><br><span class="line">GET user_v1/_mapping</span><br><span class="line"></span><br><span class="line">PUT user_v1</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">64</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;userProfile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;userAvatar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isDelete&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>定义接口实现搜索建议方法 : CustomUserEsRepository</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomUserEsRepository</span> &#123;</span><br><span class="line">    List&lt;String&gt; <span class="title function_">suggest</span><span class="params">(String prefix)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现接口 : CustomUserEsRepositoryImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomUserEsRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">CustomUserEsRepository</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">suggest</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; suggestions = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        suggestions.addAll(suggestField(<span class="string">&quot;userName.suggest&quot;</span>, prefix));</span><br><span class="line">        suggestions.addAll(suggestField(<span class="string">&quot;userProfile.suggest&quot;</span>, prefix));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(suggestions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">suggestField</span><span class="params">(String field, String prefix)</span> &#123;</span><br><span class="line">        List&lt;String&gt; suggestions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user_v1&quot;</span>);</span><br><span class="line">            <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">            <span class="type">SuggestBuilder</span> <span class="variable">suggestBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuggestBuilder</span>();</span><br><span class="line">            <span class="type">CompletionSuggestionBuilder</span> <span class="variable">completionSuggestionBuilder</span> <span class="operator">=</span></span><br><span class="line">                    SuggestBuilders.completionSuggestion(field).prefix(prefix).size(<span class="number">10</span>);</span><br><span class="line">            suggestBuilder.addSuggestion(<span class="string">&quot;suggest_&quot;</span> + field, completionSuggestionBuilder);</span><br><span class="line">            searchSourceBuilder.suggest(suggestBuilder);</span><br><span class="line">            searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">            searchResponse.getSuggest().getSuggestion(<span class="string">&quot;suggest_&quot;</span> + field)</span><br><span class="line">                    .getEntries().forEach(entry -&gt; &#123;</span><br><span class="line">                        entry.getOptions().forEach(option -&gt; &#123;</span><br><span class="line">                            suggestions.add(option.getText().string());</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> suggestions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="帖子部分">帖子部分</h3><ul><li>更改es索引</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">DELETE post_v1</span><br><span class="line"></span><br><span class="line">GET post_v1/_mapping</span><br><span class="line"></span><br><span class="line">PUT post_v1</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isDelete&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>定义接口实现搜索建议方法 : CustomPostEsRepository</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomPostEsRepository</span> &#123;</span><br><span class="line">    List&lt;String&gt; <span class="title function_">suggest</span><span class="params">(String prefix)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现接口 : CustomPostEsRepositoryImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomPostEsRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">CustomPostEsRepository</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">suggest</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; suggestions = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        suggestions.addAll(suggestField(<span class="string">&quot;title.suggest&quot;</span>, prefix));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(suggestions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">suggestField</span><span class="params">(String field, String prefix)</span> &#123;</span><br><span class="line">        List&lt;String&gt; suggestions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user_v1&quot;</span>);</span><br><span class="line">            <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">            <span class="type">SuggestBuilder</span> <span class="variable">suggestBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuggestBuilder</span>();</span><br><span class="line">            <span class="type">CompletionSuggestionBuilder</span> <span class="variable">completionSuggestionBuilder</span> <span class="operator">=</span></span><br><span class="line">                    SuggestBuilders.completionSuggestion(field).prefix(prefix).size(<span class="number">10</span>);</span><br><span class="line">            suggestBuilder.addSuggestion(<span class="string">&quot;suggest_&quot;</span> + field, completionSuggestionBuilder);</span><br><span class="line">            searchSourceBuilder.suggest(suggestBuilder);</span><br><span class="line">            searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">            searchResponse.getSuggest().getSuggestion(<span class="string">&quot;suggest_&quot;</span> + field)</span><br><span class="line">                    .getEntries().forEach(entry -&gt; &#123;</span><br><span class="line">                        entry.getOptions().forEach(option -&gt; &#123;</span><br><span class="line">                            suggestions.add(option.getText().string());</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> suggestions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开发总结">开发总结</h2><h3 id="webmvcconfigurer和webmvcconfigurationsupport的区别">WebMvcConfigurer和WebMvcConfigurationSupport的区别</h3><blockquote><p><a href="https://blog.csdn.net/o0way0o/article/details/135320565">WebMvcConfigurer和WebMvcConfigurationSupport（MVC配置）-CSDN博客</a></p></blockquote><blockquote><p>同时使用 <code>WebMvcConfigurer</code> 和 <code>WebMvcConfigurationSupport</code>，<code>WebMvcConfigurationSupport</code>会覆盖 Spring Boot 的自动配置，因此 <code>WebMvcConfigurer</code> 中的配置可能不会生效。建议只使用其中一种方式进行配置，以避免冲突和意外行为。</p></blockquote><h2 id="已实现">已实现</h2><blockquote><p>分页</p><p>下拉联想词提示</p><p>用户登录|注册|更新</p></blockquote><h2 id="待实现">待实现</h2><ul><li>以图搜图</li></ul>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> search-platform </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
